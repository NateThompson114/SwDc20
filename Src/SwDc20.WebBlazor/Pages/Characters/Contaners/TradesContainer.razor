@using SwDc20.WebBlazor.Pages.Characters.Modals
@using SwDc20.WebBlazor.Pages.Characters.Modals.CharacterSheet
@inject IModalService ModalService

<div class="card border-secondary" aria-roledescription="Trades Container" aria-description="Container for your trades">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4>Trades</h4>
        <CharacterSheet_TradesModal
            CurrentCharacter="@CurrentCharacter"
            OnAttributesChanged="@OnChanged"/>
    </div>
    <div class="card-body">
        <div class="card-group">
            @foreach (var trade in CurrentCharacter.Trades)
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">@trade.Name</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label for="@($"tradeBonus_{trade.Name}")">Bonus:</label>
                            @if (CanEdit)
                            {
                                <InputNumber id="@($"tradeBonus_{trade.Name}")" class="form-control" @bind-Value="trade.Bonus"/>
                            }
                            else
                            {
                                <input type="number" id="@($"tradeBonus_{trade.Name}")" class="form-control" value="@trade.Bonus" disabled />
                            }
                        </div>

                        <hr/>

                        <p>@trade.Description</p>
                    </div>
                    @if (CanEdit)
                    {
                        <div class="card-footer">
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveTrade(trade)">Remove</button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Character CurrentCharacter { get; set; }
    [Parameter] public EventCallback OnChanged { get; set; }
    [Parameter] public bool CanEdit { get; set; } = true;

    private async Task AddTrade()
    {
        if (!CanEdit) return;

        var parameters = new ModalParameters();
        parameters.Add(nameof(TradeEditForm.Trade), new Trade());

        var options = new ModalOptions()
        {
            Size = ModalSize.Small,
            Position = ModalPosition.Middle
        };

        var modal = ModalService.Show<TradeEditForm>("Add Trade", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var newTrade = (Trade)result.Data;
            CurrentCharacter.Trades.Add(newTrade);
            await OnChanged.InvokeAsync();
        }
    }

    private async Task RemoveTrade(Trade trade)
    {
        if (!CanEdit) return;

        CurrentCharacter.Trades.Remove(trade);
        await OnChanged.InvokeAsync();
    }
}