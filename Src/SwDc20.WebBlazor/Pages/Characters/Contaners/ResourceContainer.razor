@using SwDc20.WebBlazor.Pages.Characters.Modals.CharacterSheet

<div class="card border-success" aria-roledescription="Resource Container" aria-description="">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4>Resources</h4>
        @if(!CanEdit)
        {
            <CharacterSheet_ResourcesModal
                CurrentCharacter="@CurrentCharacter"
                OnAttributesChanged="@OnChanged"/>
        }
    </div>
    <div class="card-body">

        <div class="row">
            @if (CanEdit)
            {
                <div class="col-md-12">
                    <div class="input-group">
                        <label class="input-group-text">Max Action Points:</label>
                        <InputNumber class="form-control" @bind-Value="CurrentCharacter.ActionPoints" min="0" max="5" @bind-Value:after="OnChange" disabled="@(!CanEdit)"/>
                        <label class="input-group-text">Current Action Points:</label>
                        <InputNumber class="form-control" @bind-Value="CurrentCharacter.CurrentActionPoints" min="0" max="@CurrentCharacter.ActionPoints" @bind-Value:after="OnChange" disabled="@(!CanEdit)"/>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-8">
                    <ActionPointsComponent Character="@CurrentCharacter" OnActionPointsChanged="@HandleActionPointsChanged"/>
                </div>
            }
        </div>
        
        <hr/>
        
        <div class="row">
            <div class="col-md-4">
                <div class="input-group">
                    <label class="input-group-text">Death Threshold:</label>
                    <InputSelect class="form-control" @bind-Value="CurrentCharacter.SelectedDeathThresholdAttribute" @bind-Value:after="OnChange" disabled="@(!CanEdit)">
                        @foreach (var attr in AttributeList)
                        {
                            <option value="@attr">@attr @(attr == "Prime" ? "(Default)" : "")</option>
                        }
                    </InputSelect>
                    <label class="input-group-text">@CalculateDeathThreshold()</label>
                </div>
            </div>
            <div class="col-md-8"></div>
        </div>

        
        
        <div class="row">
            <div class="col-md-4">
                <div class="input-group">
                    <label class="input-group-text">Rest Points:</label>
                    <InputSelect class="form-control" @bind-Value="CurrentCharacter.SelectedRestPointsAttribute" @bind-Value:after="OnChange" disabled="@(!CanEdit)">
                        @foreach (var attr in AttributeList)
                        {
                            <option value="@attr">@attr @(attr == nameof(CurrentCharacter.Might) ? "(Default)" : "")</option>
                        }
                    </InputSelect>
                    <label class="input-group-text">@CalculateRestPoints()</label>
                </div>
            </div>
            <div class="col-md-4">
                <div class="input-group">
                    <label class="input-group-text">Grit Points:</label>
                    <InputSelect class="form-control" @bind-Value="CurrentCharacter.SelectedGritPointsAttribute" @bind-Value:after="OnChange" disabled="@(!CanEdit)">
                        @foreach (var attr in AttributeList)
                        {
                            <option value="@attr">@attr @(attr == nameof(CurrentCharacter.Charisma) ? "(Default)" : "")</option>
                        }
                    </InputSelect>
                    <label class="input-group-text">@CalculateGritPoints()</label>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="input-group">
                    <label class="input-group-text">Jump Distance:</label>
                    <InputNumber class="form-control" @bind-Value="CurrentCharacter.JumpDistance" @bind-Value:after="OnChange" disabled="@(!CanEdit)"/>
                </div>
            </div>
            <div class="col-md-4">
                <div class="input-group">
                    <label class="input-group-text">Move Speed:</label>
                    <InputNumber class="form-control" @bind-Value="CurrentCharacter.MoveSpeed" @bind-Value:after="OnChange" disabled="@(!CanEdit)"/>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group">
                    <label class="input-group-text">Currency:</label>
                    <InputNumber class="form-control" @bind-Value="CurrentCharacter.Currency" @bind-Value:after="OnChange"/>
                </div>
            </div>
        </div>
        
        
        <div class="row mb-3">
            <div class="col-12">
                <h5>Additional Resources</h5>
                <table class="table table-sm">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Max Value</th>
                        <th>Current Value</th>
                        @if (CanEdit)
                        {
                            <th>Actions</th>
                        }
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var resource in CurrentCharacter.Resources)
                    {
                        <tr>
                            <td>
                                <InputText class="form-control" @bind-Value="resource.Name" disabled="@(!CanEdit)" @bind-Value:after="OnChange"/>
                            </td>
                            <td>
                                <InputNumber class="form-control" @bind-Value="resource.MaxValue" disabled="@(!CanEdit)" @bind-Value:after="OnChange"/>
                            </td>
                            <td>
                                <InputNumber class="form-control" @bind-Value="resource.CurrentValue" min="0" max="@resource.MaxValue" @bind-Value:after="OnChange"/>
                            </td>
                            @if (CanEdit)
                            {
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveResource(resource)">Remove</button>
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
                @if (CanEdit)
                {
                    <button type="button" class="btn btn-primary btn-sm" @onclick="AddResource">Add Resource</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Character CurrentCharacter { get; set; }
    [Parameter] public bool CanEdit { get; set; } = true;
    [Parameter] public EventCallback OnChanged { get; set; }
    
    private List<string> AttributeList = new List<string> { "Prime", nameof(CurrentCharacter.Might), nameof(CurrentCharacter.Agility), nameof(CurrentCharacter.Charisma), nameof(CurrentCharacter.Intelligence) };
    
    private string SelectedDeathThresholdAttribute { get; set; } = "Prime";
    private string SelectedRestPointsAttribute { get; set; } = nameof(CurrentCharacter.Might);
    private string SelectedGritPointsAttribute { get; set; } = nameof(CurrentCharacter.Charisma);
    
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(CurrentCharacter.SelectedDeathThresholdAttribute))
            CurrentCharacter.SelectedDeathThresholdAttribute = "Prime";
        if (string.IsNullOrEmpty(CurrentCharacter.SelectedRestPointsAttribute))
            CurrentCharacter.SelectedRestPointsAttribute = nameof(CurrentCharacter.Might);
        if (string.IsNullOrEmpty(CurrentCharacter.SelectedGritPointsAttribute))
            CurrentCharacter.SelectedGritPointsAttribute = nameof(CurrentCharacter.Charisma);
    }
    
    private async Task OnChange()
    {
        await OnChanged.InvokeAsync();
        
    }
    
    private int CalculateDeathThreshold()
    {
        int attributeValue = GetAttributeValue(CurrentCharacter.SelectedDeathThresholdAttribute);
        return 0 - attributeValue;
    }

    private int CalculateRestPoints()
    {
        int attributeValue = GetAttributeValue(CurrentCharacter.SelectedRestPointsAttribute);
        return CurrentCharacter.Level + attributeValue;
    }

    private int CalculateGritPoints()
    {
        int attributeValue = GetAttributeValue(CurrentCharacter.SelectedGritPointsAttribute);
        return attributeValue + 2;
    }

    private int GetAttributeValue(string attributeName)
    {
        return attributeName switch
        {
            "Prime" => CurrentCharacter.PrimeModifier,
            nameof(CurrentCharacter.Might) => CurrentCharacter.Might,
            nameof(CurrentCharacter.Agility) => CurrentCharacter.Agility,
            nameof(CurrentCharacter.Charisma) => CurrentCharacter.Charisma,
            nameof(CurrentCharacter.Intelligence) => CurrentCharacter.Intelligence,
            _ => 0
        };
    }

    private async Task AddResource()
    {
        if (CanEdit)
        {
            CurrentCharacter.Resources.Add(new CharacterResource { Name = "New Resource", MaxValue = 0 });
            await OnChanged.InvokeAsync();
        }
    }

    private async Task RemoveResource(CharacterResource resource)
    {
        if (CanEdit)
        {
            CurrentCharacter.Resources.Remove(resource);
            await OnChanged.InvokeAsync();
        }
    }
    
    private async Task HandleActionPointsChanged(int newValue)
    {
        CurrentCharacter.CurrentActionPoints = newValue;
        await OnChange();
    }

}