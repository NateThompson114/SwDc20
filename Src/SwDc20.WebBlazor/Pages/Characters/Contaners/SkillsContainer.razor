@using SwDc20.Core.Application.Extensions
@using SwDc20.Core.Domain.Enums
@using SwDc20.WebBlazor.Pages.Characters.Modals
@using SwDc20.WebBlazor.Pages.Characters.Component
@using SwDc20.WebBlazor.Pages.Characters.Modals.CharacterSheet
@inject SkillService SkillService
@inject IModalService ModalService
@inject DiceRollerService DiceRollerService
@inject RollCommunicationService RollCommunicationService

<div class="card border-info" aria-roledescription="Skills Container" aria-description="Container for your skills, this allows you to handle either your custom skills or default skills, once you do that you can then further customize.">

    <div class="card-header">
        <div class="row align-items-center">
            <div class="col">
                <h4>Skills</h4>
            </div>
            <div class="col-auto">
                <CharacterSheet_SkillsModal Character="@Character" OnSkillsChanged="@OnChanged"/>
            </div>
        </div>
    </div>

    @* <div class="card-header"> *@
    @*     <div class="row align-items-center"> *@
    @*         <div class="col"> *@
    @*             <h4>Skills</h4> *@
    @*         </div> *@
    @*         @if (CanEdit) *@
    @*         { *@
    @*             <div class="col-auto"> *@
    @*                 <button type="button" class="btn btn-primary btn-sm" @onclick="AddSkill" title="Add Skill">+ Add New Skill Modal</button> *@
    @*             </div> *@
    @*         } *@
    @*     </div> *@
    @* </div> *@

    @* Show Rank, Attribute User (First 3), Skill, and Bonus *@
    <div class="card-body">
        <table class="table table-borderless table-striped table-hover">
            <thead>
            <tr>
                <th>Name</th>
                @if (!IsMobile && !CompactVersion)
                {
                    <th>Attribute</th>
                }
                @if (CanEdit)
                {
                    <th>Tag</th>
                    <th>Rank</th>
                }
                @if (!VersionTwo)
                {
                    @if (!IsMobile && !CompactVersion)
                    {
                        <th>Value</th>
                    }
                }

                @if (CanEdit)
                {
                    <th>Actions</th>
                }
                else
                {
                    <th>
                        @(VersionTwo ? "Value" : "Skill Check")
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var skill in Character.Skills.OrderByCustomSkillSort())
            {
                <SkillRowComponent
                    Skill="@skill"
                    Character="@Character"
                    CanEdit="@CanEdit"
                    IsMobile="@IsMobile"
                    CompactVersion="@CompactVersion"
                    VersionTwo="@VersionTwo"
                    RollTypeIndex="@RollTypeIndex"
                    RollTypeIndexChanged="@(async (int value) => { RollTypeIndex = value; StateHasChanged(); })"
                    Quantity="@Quantity"
                    QuantityChanged="@(async (int value) => { Quantity = value; StateHasChanged(); })"
                    OnEdit="@EditSkill"
                    OnRemove="@RemoveSkill"
                    OnRoll="@Roll"/>
            }
            </tbody>
            @if (CanEdit)
            {
                <tfoot>
                <tr>
                    <th colspan="3">Total</th>
                    <th>@Character.Skills.Sum(i => i.Rank)</th>
                    <th colspan="2"></th>
                </tr>
                </tfoot>
            }
        </table>
    </div>
    @if (CanEdit)
    {
        <div class="card-footer">
            <h6>Add Knowledge Skill</h6>
            <div class="input-group">
                <label class="input-group-text" for="newSkillName">Skill Name</label>
                <InputText id="newSkillName" @bind-Value="newSkillName" class="form-control"/>
                <button type="button" class="btn btn-primary" @onclick="AddNewSkill">Add Skill</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Character Character { get; set; }
    [Parameter] public bool CanEdit { get; set; } = true;
    [Parameter] public EventCallback OnChanged { get; set; }
    [Parameter] public bool IsMobile { get; set; }


    [Parameter] public bool CompactVersion { get; set; }
    [Parameter] public bool VersionTwo { get; set; }
    [Parameter] public bool DemoMode { get; set; }

    private async Task OnResourceChanged()
    {
        await OnChanged.InvokeAsync(Character);
    }

    private List<DocumentWrapper<Skill>> availableSkills;
    private string newSkillName = "";
    private string newSkillAttribute = "Intelligence";
    private string newTagAttribute = "Knowledge";

    protected override async Task OnInitializedAsync()
    {
        availableSkills = await SkillService.GetSkillsAsync();

        if (availableSkills.Count() == 0)
        {
            availableSkills = SkillService.GetDefaultSkills().Select(s => new DocumentWrapper<Skill>
            {
                ContentId = s.Id,
                Document = s,
                DocumentType = "Skill",
                ContentVersion = s.Version
            }).ToList();
        }

        if (Character.Skills.Count == 0)
        {
            Character.Skills = availableSkills.Select(s => s.Document).Select(s => new Skill()
            {
                Id = s.Id,
                Name = s.Name,
                AttributeUsed = s.AttributeUsed,
                Tag = s.Tag,
                UseForMartialCheck = s.UseForMartialCheck,
                Version = Skill.CurrentVersion
            }).ToList();
        }
    }

    private void VersionTwoAlignment()
    {
        if (!VersionTwo)
        {
            CompactVersion = false;
        }
    }

    private async Task AddSkill()
    {
        if (!CanEdit) return;

        var parameters = new ModalParameters();
        parameters.Add(nameof(SkillEditForm.Skill), new Skill
        {
            AttributeUsed = SkillService.GetAttributeOptions().First(),
            Id = Guid.NewGuid(),
            Version = Skill.CurrentVersion
        });

        var options = new ModalOptions()
        {
            Size = ModalSize.Small,
            Position = ModalPosition.Middle
        };

        var modal = ModalService.Show<SkillEditForm>("Add Skill", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var newSkill = (Skill)result.Data;
            Character.Skills.Add(newSkill);
        }
    }

    private void AddNewSkill()
    {
        if (!CanEdit) return;

        if (!string.IsNullOrWhiteSpace(newSkillName) && !Character.Skills.Any(s => s.Name == newSkillName))
        {
            var newSkill = new Skill(newSkillName, newSkillAttribute, newTagAttribute)
            {
                Id = Guid.NewGuid(),
                Version = Skill.CurrentVersion
            };
            Character.Skills.Add(newSkill);
            availableSkills.Add(new DocumentWrapper<Skill>
            {
                ContentId = newSkill.Id,
                Document = newSkill,
                DocumentType = "Skill",
                ContentVersion = newSkill.Version
            });
            SkillService.SaveSkillAsync(newSkill);

            newSkillName = "";
            newSkillAttribute = "Intelligence";
            newTagAttribute = "Knowledge";
            StateHasChanged();
        }
    }

    private async Task EditSkill(Skill skill)
    {
        if (!CanEdit) return;

        var parameters = new ModalParameters();
        parameters.Add(nameof(SkillEditForm.Skill), new Skill
        {
            Id = skill.Id,
            Name = skill.Name,
            AttributeUsed = skill.AttributeUsed,
            Rank = skill.Rank,
            UseForMartialCheck = skill.UseForMartialCheck,
            Tag = skill.Tag,
            Version = skill.Version
        });

        var options = new ModalOptions()
        {
            Size = ModalSize.Small,
            Position = ModalPosition.Middle
        };

        var modal = ModalService.Show<SkillEditForm>("Edit Skill", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var editedSkill = (Skill)result.Data;
            var index = Character.Skills.FindIndex(s => s.Id == editedSkill.Id);
            if (index != -1)
            {
                Character.Skills[index] = editedSkill;
            }
        }
    }

    private void OpenDiceRollModal(string title, string description, int modifier)
    {
        var parameters = new ModalParameters()
            .Add(nameof(DiceRollerModal.Title), title)
            .Add(nameof(DiceRollerModal.Description), description)
            .Add(nameof(DiceRollerModal.Modifier), modifier);

        ModalService.Show<DiceRollerModal>("Dice Roll", parameters);
    }

    private async Task RollDice(int Quantity, int Modifier, RollType CurrentRollType, string Title)
    {
        DiceRollerService.RollDice(20, Quantity, Modifier, CurrentRollType, Title);
    }

    private void RemoveSkill(Skill skill)
    {
        if (!CanEdit) return;
        Character.Skills.Remove(skill);
    }

    #region Better Roll Setup

    //todo: Move this to a shared component, takes in skill info and rolls the dice

    private int RollTypeIndex { get; set; } = 1; // 0: Disadvantage, 1: Normal, 2: Advantage
    private int Quantity { get; set; } = 2;

    private RollType CurrentRollType => RollTypeIndex switch
    {
        0 => RollType.Low,
        1 => RollType.Normal,
        2 => RollType.High,
        _ => RollType.Normal
    };

    private string CurrentRollTypeText => CurrentRollType switch
    {
        RollType.Low => "Disadvantage",
        RollType.Normal => "Normal",
        RollType.High => "Advantage",
        _ => "Normal"
    };

    private string GetRollButtonClass()
    {
        return CurrentRollType switch
        {
            RollType.Normal => "btn-info",
            RollType.High => "btn-success",
            RollType.Low => "btn-danger",
            _ => "btn-secondary"
        };
    }

    private void Roll(Skill skill)
    {
        int quantity = CurrentRollType == RollType.Normal ? 1 : Quantity;

        RollCommunicationService.RequestRoll(20, quantity, skill.CalculateValue(Character), CurrentRollType, $"{skill.Name} check", null);
        ResetRoll();
    }

    private void ResetRoll()
    {
        RollTypeIndex = 1; // Reset to Normal
        Quantity = 2;
    }

    #endregion

}