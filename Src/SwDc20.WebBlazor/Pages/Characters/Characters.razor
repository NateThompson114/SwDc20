@page "/characters"
@using System.Text
@using System.Text.Json
@using SwDc20.WebBlazor.Pages.Characters.Modals
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IJSRuntime JsRuntime

<h3>Characters</h3>

@if (characters == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mb-3 d-flex gap-2">
        <button class="btn btn-primary" @onclick="CreateNewCharacter">Create New Character</button>
        <button class="btn btn-secondary" @onclick="ImportCharacter">Import Character</button>
    </div>

    <div class="row row-cols-auto">
        @foreach (var characterWrapper in characters)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-3">
                            <h5 class="card-title">@characterWrapper.Document.Name</h5>
                            <div class="dropdown">
                                <button class="btn btn-link" type="button" id="dropdownMenuButton-@characterWrapper.Document.Id"
                                        data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-ellipsis-vertical"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton-@characterWrapper.Document.Id">
                                    <li><button class="dropdown-item" @onclick="() => ExportToJson(characterWrapper)">Export to JSON</button></li>
                                    <li><button class="dropdown-item disabled">Export to AlchemyRPG (coming soon)</button></li>
                                    <li><button class="dropdown-item disabled">Export to Foundry (coming soon)</button></li>
                                    <li><button class="dropdown-item disabled">Export to Roll20 (coming soon)</button></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><button class="dropdown-item alert-danger" @onclick="() => DeleteCharacter(characterWrapper.Document.Id)">Delete</button></li>
                                </ul>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                @* <h5 class="card-title">@characterWrapper.Document.Name</h5> *@
                                <p class="card-text">Level: @characterWrapper.Document.Level</p>
                                <p class="card-text">Class: @characterWrapper.Document.Class</p>
                                <p class="card-text">Sub Class: @characterWrapper.Document.Subclass</p>
                                <p class="card-text">Ancestry: @characterWrapper.Document.Ancestry</p>
                                @if (!string.IsNullOrEmpty(characterWrapper.Document.Background))
                                {
                                    <h6>Description</h6>
                                    <p class="card-text">
                                        @characterWrapper.Document.Background
                                    </p>
                                }
                            </div>
                            <div class="col-6">
                                @if (!string.IsNullOrEmpty(characterWrapper.Document.ImageUrl))
                                {
                                    <img src="@characterWrapper.Document.ImageUrl" alt="Character Image" style="max-width: 200px; max-height: 200px;"/>
                                }
                            </div>
                        </div>

                        <button class="btn btn-success mr-2" @onclick="() => PlayCharacter(characterWrapper.Document.Id)">Play</button>
                        <button class="btn btn-primary mr-2" @onclick="() => EditCharacter(characterWrapper.Document.Id)">Edit</button>
                        
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<DocumentWrapper<Character>> characters;

    protected override async Task OnInitializedAsync()
    {
        characters = await CharacterService.GetCharactersAsync();
        
        var repairNeeded = false;
        foreach (var character in characters)
        {
            if (character.Id != default && character.ContentId != default && character.Document.Id != default)
            {
                continue;
            }

            var newCharacterId = Guid.NewGuid();
                
            character.Id = newCharacterId;
            character.ContentId = newCharacterId;
            character.Document.Id = newCharacterId;
                
            await CharacterService.SaveCharacterAsync(character);
            repairNeeded = true;
        }
        
        if (repairNeeded)
        {
            NavigationManager.NavigateTo($"/characters/");
        }
    }

    private void CreateNewCharacter()
    {
        var newCharacterId = Guid.NewGuid();
        NavigationManager.NavigateTo($"/characters/create");
    }

    private void EditCharacter(Guid id)
    {
        NavigationManager.NavigateTo($"/characters/edit/{id}");
    }

    private async Task DeleteCharacter(Guid id)
    {
        var parameters = new ModalParameters();
        var modal = ModalService.Show<DeleteConfirmation>("Confirm Delete");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            await CharacterService.DeleteCharacterAsync(id);
            await RefreshCharacters();
        }
    }

    private async Task RefreshCharacters()
    {
        characters = await CharacterService.GetCharactersAsync();
        StateHasChanged();
    }

    private void PlayCharacter(Guid id)
    {
        NavigationManager.NavigateTo($"/characters/{id}");
    }
    
    private async Task ExportToJson(DocumentWrapper<Character> character)
    {
        var json = JsonSerializer.Serialize(character, new JsonSerializerOptions 
        { 
            WriteIndented = true 
        });
        
        var fileName = $"{character.Document.Name}_export.json";
        var bytes = Encoding.UTF8.GetBytes(json);
        await JsRuntime.InvokeVoidAsync("downloadFile", fileName, "application/json", bytes);
    }

    private async Task ImportCharacter()
    {
        var modal = ModalService.Show<ImportCharacterModal>("Import Character");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var importedCharacter = (DocumentWrapper<Character>)result.Data;
            await CharacterService.SaveCharacterAsync(importedCharacter);
            await RefreshCharacters();
        }
    }
}