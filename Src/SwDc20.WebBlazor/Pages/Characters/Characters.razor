@page "/characters"
@using SwDc20.WebBlazor.Pages.Characters.Modals
@using SwDc20.Core.Domain.Entities.GameInfo.V0._8
@inject CharacterService CharacterService
@inject WeaponService WeaponService
@inject NavigationManager NavigationManager
@inject GamesService GamesService
@inject IModalService ModalService

<h3>Characters</h3>

@if (characters == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="CreateNewCharacter">Create New Character</button>
    </div>

    <div class="row row-cols-auto">
        @foreach (var characterWrapper in characters)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <h5 class="card-title">@characterWrapper.Document.Name</h5>
                                <p class="card-text">Level: @characterWrapper.Document.Level</p>
                                <p class="card-text">Class: @characterWrapper.Document.Class</p>
                                <p class="card-text">Sub Class: @characterWrapper.Document.Subclass</p>
                                <p class="card-text">Ancestry: @characterWrapper.Document.Ancestry</p>
                            </div>
                            <div class="col-6">
                                @if (!string.IsNullOrEmpty(characterWrapper.Document.ImageUrl))
                                {
                                    <img src="@characterWrapper.Document.ImageUrl" alt="Character Image" style="max-width: 200px; max-height: 200px;"/>
                                }
                            </div>
                        </div>
                        
                        <button class="btn btn-success mr-2" @onclick="() => PlayCharacter(characterWrapper.Document.Id)">Play</button>
                        <button class="btn btn-primary mr-2" @onclick="() => EditCharacter(characterWrapper.Document.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCharacter(characterWrapper.Document.Id)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<DocumentWrapper<Character>> characters;

    protected override async Task OnInitializedAsync()
    {
        characters = await CharacterService.GetCharactersAsync();
    }

    private void CreateNewCharacter()
    {
        var newCharacterId = Guid.NewGuid();
        NavigationManager.NavigateTo($"/character/{newCharacterId}");
    }

    private void EditCharacter(Guid id)
    {
        NavigationManager.NavigateTo($"/character/{id}?edit=True");
    }

    private async Task DeleteCharacter(Guid id)
    {
        var parameters = new ModalParameters();
        var modal = ModalService.Show<DeleteConfirmation>("Confirm Delete");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            await CharacterService.DeleteCharacterAsync(id);
            await RefreshCharacters();
        }
    }

    private async Task RefreshCharacters()
    {
        characters = await CharacterService.GetCharactersAsync();
        StateHasChanged();
    }

    private void PlayCharacter(Guid id)
    {
        NavigationManager.NavigateTo($"/character/{id}");
    }
}