@using SwDc20.Core.Domain.Entities.Weapon.V0._8
@inject WeaponService WeaponService

<div>
<button type="button" @onclick="OpenModal" class="btn btn-link p-1" aria-label="Attribute Settings">
    <i class="fa-solid fa-gear"></i>
</button>

@if (IsOpen)
{
    <div class="modal show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title">Edit Combat</h5>
        <button type="button" class="btn-close" @onclick="CloseModal"></button>
    </div>
    <div class="modal-body">
    <div class="container-fluid">
    <EditForm Model="@CurrentCharacter" OnValidSubmit="SaveChanges">
    <!-- Attack/Spell Check Section -->
    <div class="row align-items-start mb-2">
        <div class="col-auto">
            @(CurrentCharacter.AttackSpellCheck > 0 ? CurrentCharacter.AttackSpellCheck : CurrentCharacter.CombatMastery + CurrentCharacter.PrimeModifier)
        </div>
        <div class="col-auto">
            <p class="mb-0">Attack/Spell Check (CM+Prime)</p>
        </div>
    </div>

    <div class="form-floating mb-3">
        <InputNumber id="attackSpellCheck" class="form-control" @bind-Value="CurrentCharacter.AttackSpellCheck"/>
        <label for="attackSpellCheck">Attack/Spell Check Override</label>
    </div>

    <hr/>

    <!-- Save DC Section -->
    <div class="row align-items-start mb-2">
        <div class="col-auto">
            <p>@(CurrentCharacter.SaveDifficultyCheck > 0 ? CurrentCharacter.SaveDifficultyCheck : (CurrentCharacter.CombatMastery + CurrentCharacter.PrimeModifier + 10))</p>
        </div>
        <div class="col-auto">
            <p class="mb-0">Save DC (CM+Prime+10)</p>
        </div>
    </div>

    <div class="form-floating mb-3">
        <InputNumber id="damageBonus" class="form-control" @bind-Value="CurrentCharacter.SaveDifficultyCheck"/>
        <label for="damageBonus">Save DC Override</label>
    </div>

    <hr/>

    <!-- Martial Check Section -->
    <div class="row align-items-start mb-2">
        <div class="col-auto">
            @GetMartialCheckValue()
        </div>
        <div class="col-auto">
            <p class="mb-0">Martial Check (@MartialSkillsAvailable())</p>
        </div>
    </div>

    <div class="form-floating mb-3">
        <select class="form-control" id="martialCheckOverride" value="@CurrentCharacter.SelectedMartialCheckOption" @onchange="OnMartialCheckOptionChanged">
            <option value="">Take Default Maximum</option>
            @foreach (var skill in CurrentCharacter.Skills.Where(sk => sk.UseForMartialCheck))
            {
                <option value="@skill.Id">@skill.Name (@skill.CalculateValue(CurrentCharacter))</option>
            }
        </select>
        <label for="martialCheckOverride">Default Martial Check Override</label>
    </div>

    <hr/>

    <!-- Weapons Section -->
    <div class="row align-items-center mb-3">
        <div class="col">
            <h4>Weapons</h4>
        </div>
        <div class="col-auto">
            @if (!isAddingWeapon)
            {
                <button type="button" class="btn btn-primary btn-sm" @onclick="StartAddWeapon">+ Add Weapon</button>
            }
        </div>
    </div>

    @if (isAddingWeapon)
    {
        <div class="card mb-3">
            <div class="card-body">
                <h6>Add New Weapon</h6>
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="form-floating">
                            <InputText id="weaponName" class="form-control" @bind-Value="newWeapon.Name"/>
                            <label for="weaponName">Name</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-floating">
                            <InputNumber id="weaponDamage" class="form-control" @bind-Value="newWeapon.Damage"/>
                            <label for="weaponDamage">Damage</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-floating">
                            <InputSelect id="damageType" class="form-control" @bind-Value="newWeapon.DamageType">
                                @foreach (var type in Enum.GetValues(typeof(DamageType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                            <label for="damageType">Damage Type</label>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <InputSelect id="weaponType" class="form-control" @bind-Value="newWeapon.WeaponType">
                                @foreach (var type in Enum.GetValues(typeof(WeaponType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                            <label for="weaponType">Weapon Type</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-floating">
                            <InputNumber id="weaponQuantity" class="form-control" @bind-Value="newWeapon.Quantity"/>
                            <label for="weaponQuantity">Quantity</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-check">
                            <InputCheckbox id="weaponEquipped" class="form-check-input" @bind-Value="newWeapon.Equipped"/>
                            <label class="form-check-label" for="weaponEquipped">Equipped</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox id="weaponPrimary" class="form-check-input" @bind-Value="newWeapon.IsPrimary"/>
                            <label class="form-check-label" for="weaponPrimary">Primary</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox id="weaponSecondary" class="form-check-input" @bind-Value="newWeapon.IsSecondary"/>
                            <label class="form-check-label" for="weaponSecondary">Secondary</label>
                        </div>
                    </div>


                    <div class="col-12">
                        <div class="form-floating">
                            <InputTextArea id="weaponDescription" class="form-control" @bind-Value="newWeapon.Description" style="height: 100px"/>
                            <label for="weaponDescription">Description</label>
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-primary" @onclick="HandleWeaponSubmit">Save Weapon</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelAddWeapon">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @foreach (var weapon in CurrentCharacter.Weapons)
    {
        <div class="card">
            <div class="card-header">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>@weapon.Name</h4>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveWeapon(weapon)" title="Delete">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="form-floating">
                            <InputText id="weaponName" class="form-control" @bind-Value="weapon.Name"/>
                            <label for="weaponName">Name</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-floating">
                            <InputNumber id="weaponDamage" class="form-control" @bind-Value="weapon.Damage"/>
                            <label for="weaponDamage">Damage</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-floating">
                            <InputSelect id="damageType" class="form-control" @bind-Value="weapon.DamageType">
                                @foreach (var type in Enum.GetValues(typeof(DamageType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                            <label for="damageType">Damage Type</label>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <InputSelect id="weaponType" class="form-control" @bind-Value="weapon.WeaponType">
                                @foreach (var type in Enum.GetValues(typeof(WeaponType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                            <label for="weaponType">Weapon Type</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-floating">
                            <InputNumber id="weaponQuantity" class="form-control" @bind-Value="weapon.Quantity"/>
                            <label for="weaponQuantity">Quantity</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-check">
                            <InputCheckbox id="weaponEquipped" class="form-check-input" @bind-Value="weapon.Equipped"/>
                            <label class="form-check-label" for="weaponEquipped">Equipped</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox id="weaponPrimary" class="form-check-input" @bind-Value="weapon.IsPrimary"/>
                            <label class="form-check-label" for="weaponPrimary">Primary</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox id="weaponSecondary" class="form-check-input" @bind-Value="weapon.IsSecondary"/>
                            <label class="form-check-label" for="weaponSecondary">Secondary</label>
                        </div>
                    </div>


                    <div class="col-12">
                        <div class="form-floating">
                            <InputTextArea id="weaponDescription" class="form-control" @bind-Value="weapon.Description" style="height: 200px"/>
                            <label for="weaponDescription">Description</label>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    }

    <hr/>

    <div class="input-group">
        <label class="input-group-text" for="weaponName">Weapon Name</label>
        <select class="form-control" @bind="selectedWeaponId">
            <option selected="selected" value="">
                @(availableWeapons.Any() ? "-- Select Weapon --" : "Add Weapons to the Weapon Tab to Select Available")
            </option>
            @foreach (var weaponWrapper in availableWeapons)
            {
                <option value="@weaponWrapper.ContentId">@weaponWrapper.Document.Name</option>
            }
        </select>
        <button type="button" class="btn btn-primary" @onclick="AddWeaponFromAvailable">Add Weapon</button>
    </div>

    </EditForm>
    </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
        <SaveButtonComponent OnSave="SaveChanges"/>
    </div>
    </div>
    </div>
    </div>
}
</div>

@code {
    [Parameter] public Character CurrentCharacter { get; set; }
    [Parameter] public EventCallback OnAttributesChanged { get; set; }
    [Parameter] public bool IsMobile { get; set; }

    private bool IsOpen { get; set; }
    private bool isAddingWeapon { get; set; }
    private CharacterWeapon newWeapon = new();
    private List<DocumentWrapper<Weapon>> availableWeapons = new List<DocumentWrapper<Weapon>>();
    private Guid selectedWeaponId;

    protected override async Task OnInitializedAsync()
    {
        availableWeapons = await WeaponService.GetWeaponsAsync();
    }

    private void OpenModal()
    {
        IsOpen = true;
    }

    private void CloseModal()
    {
        IsOpen = false;
        isAddingWeapon = false;
    }

    private void StartAddWeapon()
    {
        newWeapon = new CharacterWeapon();
        isAddingWeapon = true;
    }

    private void CancelAddWeapon()
    {
        isAddingWeapon = false;
        newWeapon = new CharacterWeapon();
    }

    private void HandleWeaponSubmit()
    {
        CurrentCharacter.Weapons.Add(newWeapon);
        isAddingWeapon = false;
        newWeapon = new CharacterWeapon();
    }

    private async Task SaveChanges()
    {
        await OnAttributesChanged.InvokeAsync();
        IsOpen = false;
    }

    private string MartialSkillsAvailable() =>
        string.Join(" or ", CurrentCharacter.Skills
            .Where(sk => sk.UseForMartialCheck)
            .Select(sk => sk.Name));

    private int GetMartialCheckValue()
    {
        if (CurrentCharacter.MartialCheck > 0)
        {
            return CurrentCharacter.MartialCheck;
        }

        if (Guid.TryParse(CurrentCharacter.SelectedMartialCheckOption, out Guid selectedSkillId))
        {
            var selectedSkill = CurrentCharacter.Skills.FirstOrDefault(s => s.Id == selectedSkillId);
            return selectedSkill?.CalculateValue(CurrentCharacter) ?? 0;
        }

        return CurrentCharacter.Skills
            .Where(sk => sk.UseForMartialCheck)
            .Select(sk => sk.CalculateValue(CurrentCharacter))
            .DefaultIfEmpty(0)
            .Max();
    }

    private async Task OnMartialCheckOptionChanged(ChangeEventArgs e)
    {
        CurrentCharacter.SelectedMartialCheckOption = e.Value.ToString();
    }

    private void RemoveWeapon(CharacterWeapon weapon)
    {
        CurrentCharacter.Weapons.Remove(weapon);
    }

    private enum DamageType
    {
        Slashing,
        Piercing,
        Bludgeoning,
        Fire,
        Lightning,
        Cold,
        Sonic,
        Poison,
        Corrosion,
        Radiant,
        Umbral,
        Psychic,
        True
    }

    private enum WeaponType
    {
        Melee,
        Ranged
    }

    private async Task AddWeaponFromAvailable()
    {
        if (selectedWeaponId != Guid.Empty)
        {
            var selectedWeaponWrapper = availableWeapons.FirstOrDefault(w => w.ContentId == selectedWeaponId);
            if (selectedWeaponWrapper != null)
            {
                var characterWeapon = new CharacterWeapon(selectedWeaponWrapper.Document);
                CurrentCharacter.Weapons.Add(characterWeapon);
                Console.WriteLine($"Added weapon: {characterWeapon.Name}");
            }
            else
            {
                Console.WriteLine("Selected weapon not found in available weapons");
            }

            selectedWeaponId = Guid.Empty;
            // await OnChanged.InvokeAsync();
        }
    }
}