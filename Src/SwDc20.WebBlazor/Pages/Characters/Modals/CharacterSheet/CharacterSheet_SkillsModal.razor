@using SwDc20.Core.Domain.Entities
@using SwDc20.Core.Domain.Enums
@inject SkillService SkillService
@inject IModalService ModalService

<div>
    <button type="button" @onclick="OpenModal" class="btn btn-link p-1" aria-label="Skills Settings">
        <i class="fa-solid fa-gear"></i>
    </button>

    @if (IsOpen)
    {
        <div class="modal show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Skills Configuration</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="editSkills" @bind="IsEditing">
                            <label class="form-check-label" for="editSkills">
                                Edit Available Skills
                            </label>
                        </div>

                        @foreach (var attributeGroup in GroupedSkills)
                        {
                            <div class="skill-group mb-4">
                                <h6 class="border-bottom pb-2">@attributeGroup.Key</h6>
                                <table class="table table-borderless table-striped table-hover">
                                    <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Tag</th>
                                        <th>Rank</th>
                                        @if (IsEditing)
                                        {
                                            <th>Actions</th>
                                        }
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var skill in attributeGroup.OrderBy(s => s.Tag).ThenBy(s => s.Name))
                                    {
                                        <tr class="@(IsSkillUnsaved(skill) ? "table-warning" : "")">
                                            @if (editingSkills.Contains(skill.Id))
                                            {
                                                <td>
                                                    <InputText @bind-Value="skill.Name" class="form-control"/>
                                                </td>
                                                <td>
                                                    <InputText @bind-Value="skill.Tag" class="form-control"/>
                                                </td>
                                                <td>
                                                    <InputNumber @bind-Value="skill.Rank" class="form-control"/>
                                                </td>
                                                @if (IsEditing)
                                                {
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-success" @onclick="() => ToggleEditSkill(skill)" title="Save">
                                                            <i class="fa-solid fa-check"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveSkill(skill)" title="Delete">
                                                            <i class="fa-solid fa-trash"></i>
                                                        </button>
                                                    </td>
                                                }
                                            }
                                            else
                                            {
                                                <td>
                                                    @skill.Name
                                                    @if (IsSkillUnsaved(skill))
                                                    {
                                                        <span class="badge bg-warning text-dark ms-2">Unsaved</span>
                                                    }
                                                </td>
                                                <td>@skill.Tag</td>
                                                <td>
                                                    <InputNumber class="form-control" @bind-Value="skill.Rank"/>
                                                </td>
                                                @if (IsEditing)
                                                {
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-secondary" @onclick="() => ToggleEditSkill(skill)" title="Edit">
                                                            <i class="fa-solid fa-pen"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveSkill(skill)" title="Delete">
                                                            <i class="fa-solid fa-trash"></i>
                                                        </button>
                                                    </td>
                                                }
                                            }
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        }

                        <div class="mt-4">
                            <h6>Add Knowledge Skill</h6>
                            <div class="input-group">
                                <label class="input-group-text" for="newSkillName">Skill Name</label>
                                <InputText id="newSkillName" @bind-Value="newSkillName" class="form-control"/>
                                <SaveButtonComponent OnSave="AddNewKnowledgeSkill" ButtonClass="btn btn-primary">
                                    Add Skill
                                </SaveButtonComponent>
                            </div>
                        </div>

                        @if (IsEditing)
                        {
                            <div class="card mt-4">
                                <div class="card-header">
                                    <h6 class="mb-0">Add New Skill</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-3">
                                        <div class="col-md-4">
                                            <label class="form-label">Name</label>
                                            <div class="form-group @(HasNameError ? "has-validation" : "")">
                                                <InputText @bind-Value="newSkill.Name"
                                                           @bind-Value:after="ValidateSkillName"
                                                           class="@GetNameInputClass()"
                                                           placeholder="Skill Name"/>
                                                @if (HasNameError)
                                                {
                                                    <div class="invalid-feedback">
                                                        A skill with this name already exists.
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Attribute</label>
                                            <InputSelect @bind-Value="newSkill.AttributeUsed" class="form-select">
                                                @foreach (var attr in CharacterAttribute.GetAttributes())
                                                {
                                                    <option value="@attr.Name">@attr.Name</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Tag</label>
                                            <InputText @bind-Value="newSkill.Tag" class="form-control" placeholder="Tag"/>
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">Rank</label>
                                            <InputNumber @bind-Value="newSkill.Rank" class="form-control"/>
                                        </div>
                                    </div>
                                    <div class="mt-3">
                                        <SaveButtonComponent OnSave="@(async () => await HandleNewSkillSave())"
                                                             ButtonClass="btn btn-success"
                                                             Disabled="@HasNameError">
                                            Save Skill
                                        </SaveButtonComponent>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <SaveButtonComponent OnSave="SaveChanges"/>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Character Character { get; set; }
    [Parameter] public EventCallback OnSkillsChanged { get; set; }

    private bool IsOpen { get; set; }
    private bool IsEditing { get; set; }
    private HashSet<Guid> _savedSkillIds = new();
    private HashSet<Guid> editingSkills = new();

    private string newSkillName = "";
    private List<DocumentWrapper<Skill>> availableSkills;

    private Skill newSkill = new()
    {
        Id = Guid.NewGuid(),
        Version = Skill.CurrentVersion
    };

    private string GetNameInputClass()
    {
        return $"form-control {(HasNameError ? "is-invalid" : "")}";
    }

    private bool HasNameError => !string.IsNullOrWhiteSpace(newSkill.Name) &&
                                 Character.Skills.Any(s => s.Name.Equals(newSkill.Name, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<IGrouping<string, Skill>> GroupedSkills =>
        Character.Skills
            .OrderBy(s => CharacterAttribute.FromName(s.AttributeUsed).Value)
            .GroupBy(s => s.AttributeUsed);

    protected override async Task OnInitializedAsync()
    {
        IsEditing = false;
        availableSkills = Character.Skills
            .Select(s => new DocumentWrapper<Skill>
            {
                ContentId = s.Id,
                Document = s,
                DocumentType = "Skill",
                ContentVersion = s.Version
            }).ToList();

        if (!availableSkills.Any())
        {
            availableSkills = SkillService.GetDefaultSkills()
                .Select(s => new DocumentWrapper<Skill>
                {
                    ContentId = s.Id,
                    Document = s,
                    DocumentType = "Skill",
                    ContentVersion = s.Version
                }).ToList();
        }

        _savedSkillIds = new HashSet<Guid>(availableSkills.Select(s => s.ContentId));
        ResetNewSkill();
    }

    private void OpenModal()
    {
        IsOpen = true;
    }

    private void CloseModal()
    {
        IsEditing = false;
        IsOpen = false;
        editingSkills.Clear();
        ResetNewSkill();
    }

    private void ToggleEditSkill(Skill skill)
    {
        if (editingSkills.Contains(skill.Id))
        {
            editingSkills.Remove(skill.Id);
        }
        else
        {
            editingSkills.Add(skill.Id);
        }

        StateHasChanged();
    }

    private void ResetNewSkill()
    {
        newSkill = new Skill
        {
            Id = Guid.NewGuid(),
            Version = Skill.CurrentVersion,
            AttributeUsed = "Prime",
            Rank = 0
        };
    }

    private void ValidateSkillName()
    {
        StateHasChanged();
    }

    private bool IsSkillUnsaved(Skill skill)
    {
        return !_savedSkillIds.Contains(skill.Id);
    }

    private async Task HandleNewSkillSave()
    {
        if (HasNameError || string.IsNullOrWhiteSpace(newSkill.Name))
        {
            return;
        }

        var skillToAdd = new Skill
        {
            Id = Guid.NewGuid(),
            Name = newSkill.Name,
            AttributeUsed = newSkill.AttributeUsed,
            Tag = newSkill.Tag,
            Rank = newSkill.Rank,
            Version = Skill.CurrentVersion
        };

        Character.Skills.Add(skillToAdd);

        availableSkills.Add(new DocumentWrapper<Skill>
        {
            ContentId = skillToAdd.Id,
            Document = skillToAdd,
            DocumentType = "Skill",
            ContentVersion = skillToAdd.Version
        });

        await SkillService.SaveSkillAsync(skillToAdd);
        _savedSkillIds.Add(skillToAdd.Id);
        ResetNewSkill();
        StateHasChanged();
    }

    private async Task AddNewKnowledgeSkill()
    {
        if (string.IsNullOrWhiteSpace(newSkillName) ||
            Character.Skills.Any(s => s.Name.Equals(newSkillName, StringComparison.OrdinalIgnoreCase)))
        {
            return;
        }

        var newSkill = new Skill
        {
            Id = Guid.NewGuid(),
            Name = newSkillName,
            AttributeUsed = "Intelligence",
            Tag = "Knowledge",
            Rank = 0,
            Version = Skill.CurrentVersion
        };

        Character.Skills.Add(newSkill);

        availableSkills.Add(new DocumentWrapper<Skill>
        {
            ContentId = newSkill.Id,
            Document = newSkill,
            DocumentType = "Skill",
            ContentVersion = newSkill.Version
        });

        await SkillService.SaveSkillAsync(newSkill);
        _savedSkillIds.Add(newSkill.Id);
        newSkillName = "";
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        IsEditing = false;
        editingSkills.Clear();
        await OnSkillsChanged.InvokeAsync();
        foreach (var skill in Character.Skills)
        {
            _savedSkillIds.Add(skill.Id);
        }

        CloseModal();
    }

    private void RemoveSkill(Skill skill)
    {
        Character.Skills.Remove(skill);
    }

}