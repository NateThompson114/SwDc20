@page "/character/{Id:guid}"
@using SwDc20.Core.Domain.Entities.Character
@using SwDc20.Core.Domain.Entities.Weapon.V0._8
@using SwDc20.Core.Domain.Enums
@using SwDc20.WebBlazor.Pages.Characters.Modals.Contaners
@inject CharacterService CharacterService
@inject SkillService SkillService
@inject WeaponService WeaponService
@inject NavigationManager NavigationManager
@inject RollCommunicationService RollCommunicationService
@inject DiceRollerService DiceRollerService

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>@(Character?.Name ?? "New Character")</h1>
    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" id="editToggle" @bind="CanEdit" @bind:after="UpdateUrl">
        <label class="form-check-label" for="editToggle">Edit Mode</label>
    </div>
    @if (showSaveIndicator)
    {
        <span class="save-indicator text-sm-center"> ✅Saved</span>
    }
</div>

@* <button type="button" @onclick="() => SendRollToToolbox()">Send to Toolbox</button> *@


<EditForm Model="@Character" OnValidSubmit="SaveCharacter">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    @* <FloatingDiceRoller/> *@
    <Toolbar/>

    <div class="row">
        <div class="col-md-6">
            <div class="form-floating">
                <InputText id="name" @bind-Value="Character.Name" class="form-control" @bind-Value:after="AutoSaveCharacter"/>
                <label for="name">Character Name</label>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-floating">
                <InputText id="player" @bind-Value="Character.PlayerName" class="form-control" @bind-Value:after="AutoSaveCharacter"/>
                <label for="player">Player:</label>
            </div>
        </div>
    </div>

    <br/>

    <div class="row">
        <div class="form-floating">
            <div class="input-group">
                <span class="input-group-text">Level:</span>
                <InputNumber id="level" @bind-Value="Character.Level" class="form-control" min="0" max="20" @bind-Value:after="AutoSaveCharacter"/>
                <span class="input-group-text">Combat Mastery: @Character.CombatMastery</span>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="imageUrl">Image URL</label>
        <InputText id="imageUrl" class="form-control" @bind-Value="Character.ImageUrl" @bind-Value:after="AutoSaveCharacter"/>
    </div>
    @if (!string.IsNullOrEmpty(Character.ImageUrl))
    {
        <img src="@Character.ImageUrl" alt="Character Image" style="max-width: 200px; max-height: 200px;"/>
    }

    <div class="row">
        <div class="col-md-6">
            <div class="form-floating">
                <InputText id="class" @bind-Value="Character.Class" class="form-control" @bind-Value:after="AutoSaveCharacter"/>
                <label for="class">Class</label>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-floating">
                <InputText id="subclass" @bind-Value="Character.Subclass" class="form-control" @bind-Value:after="AutoSaveCharacter"/>
                <label for="subclass">SubClass</label>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="ancestry">Ancestry</label>
        <InputText id="ancestry" class="form-control" @bind-Value="Character.Ancestry" @bind-Value:after="AutoSaveCharacter"/>
    </div>

    <hr/>

    <div class="card border-danger" aria-roledescription="Attribute and Prime Container" aria-description="Container card for attribute cards and prime modifier, these are the key values for your characters, and contain Might, Agility, Charisma, and Intelligence.">
        <div class="card-header">
            <h4>Attributes</h4>
        </div>
        <div class="card-body">
            <div class="row">

                <div class="col-lg-3 col-md-6">
                    <SwDc20.WebBlazor.Components.AttributeCardWithSave
                        AttributeName="@nameof(Character.Might)"
                        @bind-AttributeValue="Character.Might"
                        @bind-SaveMastery="Character.MightSaveMastery"
                        UpdateSaveMasteries="@UpdateSaveMasteries"
                        SelectedMasteriesCount="@SelectedMasteriesCount"
                        SaveValue="@Character.CalculateSaves.CalculateMightSave(Character)"/>
                </div>

                <div class="col-lg-3 col-md-6">
                    <SwDc20.WebBlazor.Components.AttributeCardWithSave
                        AttributeName="@nameof(Character.Agility)"
                        @bind-AttributeValue="Character.Agility"
                        @bind-SaveMastery="Character.AgilitySaveMastery"
                        UpdateSaveMasteries="@UpdateSaveMasteries"
                        SelectedMasteriesCount="@SelectedMasteriesCount"
                        SaveValue="@Character.CalculateSaves.CalculateAgilitySave(Character)"/>
                </div>

                <div class="col-lg-3 col-md-6">
                    <SwDc20.WebBlazor.Components.AttributeCardWithSave
                        AttributeName="@nameof(Character.Charisma)"
                        @bind-AttributeValue="Character.Charisma"
                        @bind-SaveMastery="Character.CharismaSaveMastery"
                        UpdateSaveMasteries="@UpdateSaveMasteries"
                        SelectedMasteriesCount="@SelectedMasteriesCount"
                        SaveValue="@Character.CalculateSaves.CalculateCharismaSave(Character)"/>
                </div>

                <div class="col-lg-3 col-md-6">
                    <SwDc20.WebBlazor.Components.AttributeCardWithSave
                        AttributeName="@nameof(Character.Intelligence)"
                        @bind-AttributeValue="Character.Intelligence"
                        @bind-SaveMastery="Character.IntelligenceSaveMastery"
                        UpdateSaveMasteries="@UpdateSaveMasteries"
                        SelectedMasteriesCount="@SelectedMasteriesCount"
                        SaveValue="@Character.CalculateSaves.CalculateIntelligenceSave(Character)"/>

                </div>

            </div>
        </div>
        <div class="card-footer">
            <figure class="text-center border-info">
                <blockquote class="blockquote">
                    <p>Prime Modifier: @Character.PrimeModifier</p>
                </blockquote>
            </figure>
        </div>
    </div>

    <hr/>

    <HealthStaminaManaContainer Character="@Character" CanEdit="@CanEdit" OnChanged="@AutoSaveCharacter"/>

    <hr/>

    <DefenseContainer Character="@Character" CanEdit="@CanEdit" OnDefensesChanged="@AutoSaveCharacter"/>

    <hr/>

    <SkillsContainer Character="@Character" CanEdit="@CanEdit" OnChanged="@AutoSaveCharacter"/>

    <hr/>

    <TradesContainer Character="@Character" OnTradesChanged="@AutoSaveCharacter" CanEdit="@CanEdit"/>

    <hr/>

    <LanguageContainer Character="@Character" CanEdit="@CanEdit" OnLanguagesChanged="@AutoSaveCharacter"/>


    <hr/>

    <CombatContainer Character="@Character" CanEdit="@CanEdit" OnCombatChanged="AutoSaveCharacter"/>

    <hr/>

    <InventoryContainer Character="@Character" OnInventoryChanged="@AutoSaveCharacter" CanEdit="@CanEdit"/>

    <hr/>

    <FeaturesContainer Character="@Character" CanEdit="@CanEdit" OnFeaturesChanged="@AutoSaveCharacter"/>

    <hr/>

    <ResourceContainer Character="@Character" CanEdit="@CanEdit" OnResourcesChanged="@AutoSaveCharacter"/>

    <hr/>

    @* <div class="card" aria-roledescription="" aria-description=""> *@
    @*     <div class="card-header"></div> *@
    @*     <div class="card-body"></div> *@
    @*     <div class="card-footer"></div> *@
    @* </div> *@


    @if (CanEdit)
    {
        <button type="submit" class="btn btn-primary" @onclick="SaveCharacterAndClose">Save Character</button>
    }

    @* <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button> *@


</EditForm>

@code
{
    [Parameter] public Guid Id { get; set; } = Guid.NewGuid();
    [Parameter] public bool CanEdit { get; set; } = true;
    public Character Character { get; set; } = new()
    {
        Id = Guid.NewGuid(), 
        Version = Character.CurrentVersion
    };
    private List<DocumentWrapper<Skill>> availableSkills;
    private List<DocumentWrapper<Weapon>> availableWeapons = [];
    private bool showSaveIndicator = false;
    
    protected override async Task OnInitializedAsync()
    {
        var characterWrapper = await CharacterService.GetCharacterAsync(Id);
        
        Character = characterWrapper?.Document ?? new Character
                        {
                            Id = Id,
                            Version = Character.CurrentVersion,
                            Resources = new List<CharacterResource>()
                        };

        availableSkills = await SkillService.GetSkillsAsync();

        if (!availableSkills.Any())
        {
            availableSkills = SkillService.GetDefaultSkills()
                    .Select(s => new DocumentWrapper<Skill>
                                {
                                    ContentId = s.Id,
                                    Document = s,
                                    DocumentType = "Skill",
                                    ContentVersion = s.Version
                                }
                    ).ToList();
        }
        
        if (!Character.Skills.Any())
        {
            Character.Skills = availableSkills.Select(s => s.Document)
                    .Select(s => new Skill()
                                {
                                    Id = s.Id,
                                    Name = s.Name,
                                    AttributeUsed = s.AttributeUsed,
                                    Tag = s.Tag,
                                    UseForMartialCheck = s.UseForMartialCheck,
                                    Version = Skill.CurrentVersion
                                }
                    ).ToList();
        }


        if (Character.ActionPoints == 0)
        {
            Character.ActionPoints = 4;
        }


        availableWeapons = await WeaponService.GetWeaponsAsync();
    }
    
    // private void SendRollToToolbox()
    // {
    //     RollCommunicationService.RequestRoll(20, 1, 0, RollType.Normal, "Custom Roll", "This is a custom roll from another component");
    // }
    
    private void UpdateUrl()
    {
        var uri = NavigationManager.GetUriWithQueryParameter("canEdit", CanEdit);

        NavigationManager.NavigateTo(uri, false);
    }


    private async Task SaveCharacter()
    {
        if (Character != null)
        {
            var characterWrapper = new DocumentWrapper<Character>
                        {
                            Document = Character,
                            ContentId = Character.Id,
                            ContentVersion = Character.Version
                        };
            
            await CharacterService.SaveCharacterAsync(characterWrapper);

            showSaveIndicator = true;
            StateHasChanged();
            await Task.Delay(2000);
            showSaveIndicator = false;
            StateHasChanged();
        }
    }

    private async Task SaveCharacterAndClose()
    {
        await SaveCharacter();
        NavigationManager.NavigateTo("/characters");
    }

    private int SelectedMasteriesCount => (Character?.MightSaveMastery == true ? 1 : 0) + (Character?.AgilitySaveMastery == true ? 1 : 0) + (Character?.CharismaSaveMastery == true ? 1 : 0) + (Character?.IntelligenceSaveMastery == true ? 1 : 0);

    private async Task UpdateSaveMasteries()
    {
        await AutoSaveCharacter();
    }

    private async Task AutoSaveCharacter()
    {
        await SaveCharacter();
    }
}