@using SwDc20.Core.Domain.Enums
@inject SkillService SkillService
@inject IModalService ModalService
@inject DiceRollerService DiceRollerService

<div class="card border-info" aria-roledescription="Skills Container" aria-description="Container for your skills, this allows you to handle either your custom skills or default skills, once you do that you can then further customize.">
    <div class="card-header">
        <div class="row align-items-center">
            <div class="col">
                <h4>Skills</h4>
            </div>
            @if (CanEdit)
            {
                <div class="col-auto">
                    <button type="button" class="btn btn-primary btn-sm" @onclick="AddSkill" title="Add Skill">+ Add New Skill Modal</button>
                </div>
            }
        </div>
    </div>
    <div class="card-body">
        <table class="table table-borderless table-striped table-hover">
            <thead>
            <tr>
                <th>Name</th>
                <th>Attribute</th>
                @if (CanEdit)
                {
                    <th>Tag</th>
                    <th>Rank</th>
                }
                <th>Value</th>
                @if (CanEdit)
                {
                    <th>Actions</th>
                }
                else
                {
                    <th>
                        Skill Check
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var skill in Character.Skills)
            {
                <tr>
                    <td>@skill.Name</td>
                    <td>@skill.AttributeUsed</td>
                    @if (CanEdit)
                    {
                        <td>@skill.Tag</td>
                        <InputNumber class="form-control" @bind-Value="skill.Rank"/>
                    }

                    @* <td> *@
                    @*     @if (CanEdit) *@
                    @*     { *@
                    @*         <InputNumber class="form-control" @bind-Value="skill.Rank"/> *@
                    @*     } *@
                    @*     else *@
                    @*     { *@
                    @*         @skill.Rank *@
                    @*     } *@
                    @* </td> *@
                    <td>@skill.CalculateValue(Character)</td>
                    @if (CanEdit)
                    {
                        <td>
                            <button type="button" class="btn btn-sm btn-secondary" @onclick="() => EditSkill(skill)">Edit</button>
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveSkill(skill)">Remove</button>
                        </td>
                    }
                    else
                    {
                        <td>
                            <button @onclick="@(() => RollDice(1, skill.CalculateValue(Character), RollType.Normal, ($"Rolling {skill.Name}")))" class="btn btn-secondary btn-sm">Normal</button>
                            <button @onclick="@(() => RollDice(2, skill.CalculateValue(Character), RollType.High, ($"Rolling {skill.Name} at Advantage")))" class="btn btn-success btn-sm">Adv</button>
                            <button @onclick="@(() => RollDice(2, skill.CalculateValue(Character), RollType.Low, ($"Rolling {skill.Name} at Disadvantage")))" class="btn btn-warning btn-sm">DisAdv</button>
                            <button @onclick="@(() => RollDice(3, skill.CalculateValue(Character), RollType.Low, ($"Rolling {skill.Name} at Disadvantage+")))" class="btn btn-warning btn-sm">DisAdv+</button>
                            <button @onclick="@(() => RollDice(4, skill.CalculateValue(Character), RollType.Low, ($"Rolling {skill.Name} at Disadvantage++")))" class="btn btn-warning btn-sm">DisAdv++</button>
                            <button @onclick="@(() => OpenDiceRollModal($"Manual {skill.Name} Check", null, skill.CalculateValue(Character)))" class="btn btn-primary btn-sm">
                                @($"Manual {skill.Name} Check")
                            </button>
                        </td>
                    }

                </tr>
            }
            </tbody>
            @if (CanEdit)
            {
                <tfoot>
                <tr>
                    <th colspan="3">Total</th>
                    <th>@Character.Skills.Sum(i => i.Rank)</th>
                    <th colspan="2"></th>
                </tr>
                </tfoot>
            }
        </table>
    </div>
    @if (CanEdit)
    {
        <div class="card-footer">
            <h6>Add Knowledge Skill</h6>
            <div class="input-group">
                <label class="input-group-text" for="newSkillName">Skill Name</label>
                <InputText id="newSkillName" @bind-Value="newSkillName" class="form-control"/>
                <button type="button" class="btn btn-primary" @onclick="AddNewSkill">Add Skill</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Character Character { get; set; }
    [Parameter] public bool CanEdit { get; set; } = true;

    private List<DocumentWrapper<Skill>> availableSkills;
    private string newSkillName = "";
    private string newSkillAttribute = "Intelligence";
    private string newTagAttribute = "Knowledge";

    protected override async Task OnInitializedAsync()
    {
        availableSkills = await SkillService.GetSkillsAsync();

        if (availableSkills.Count() == 0)
        {
            availableSkills = SkillService.GetDefaultSkills().Select(s => new DocumentWrapper<Skill>
            {
                ContentId = s.Id,
                Document = s,
                DocumentType = "Skill",
                ContentVersion = s.Version
            }).ToList();
        }

        if (Character.Skills.Count == 0)
        {
            Character.Skills = availableSkills.Select(s => s.Document).Select(s => new Skill()
            {
                Id = s.Id,
                Name = s.Name,
                AttributeUsed = s.AttributeUsed,
                Tag = s.Tag,
                UseForMartialCheck = s.UseForMartialCheck,
                Version = Skill.CurrentVersion
            }).ToList();
        }
    }

    private async Task AddSkill()
    {
        if (!CanEdit) return;

        var parameters = new ModalParameters();
        parameters.Add(nameof(SkillEditForm.Skill), new Skill
        {
            AttributeUsed = SkillService.GetAttributeOptions().First(),
            Id = Guid.NewGuid(),
            Version = Skill.CurrentVersion
        });

        var options = new ModalOptions()
        {
            Size = ModalSize.Small,
            Position = ModalPosition.Middle
        };

        var modal = ModalService.Show<SkillEditForm>("Add Skill", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var newSkill = (Skill)result.Data;
            Character.Skills.Add(newSkill);
        }
    }

    private void AddNewSkill()
    {
        if (!CanEdit) return;

        if (!string.IsNullOrWhiteSpace(newSkillName) && !Character.Skills.Any(s => s.Name == newSkillName))
        {
            var newSkill = new Skill(newSkillName, newSkillAttribute, newTagAttribute)
            {
                Id = Guid.NewGuid(),
                Version = Skill.CurrentVersion
            };
            Character.Skills.Add(newSkill);
            availableSkills.Add(new DocumentWrapper<Skill>
            {
                ContentId = newSkill.Id,
                Document = newSkill,
                DocumentType = "Skill",
                ContentVersion = newSkill.Version
            });
            SkillService.SaveSkillAsync(newSkill);

            newSkillName = "";
            newSkillAttribute = "Intelligence";
            newTagAttribute = "Knowledge";
            StateHasChanged();
        }
    }

    private async Task EditSkill(Skill skill)
    {
        if (!CanEdit) return;

        var parameters = new ModalParameters();
        parameters.Add(nameof(SkillEditForm.Skill), new Skill
        {
            Id = skill.Id,
            Name = skill.Name,
            AttributeUsed = skill.AttributeUsed,
            Rank = skill.Rank,
            UseForMartialCheck = skill.UseForMartialCheck,
            Tag = skill.Tag,
            Version = skill.Version
        });

        var options = new ModalOptions()
        {
            Size = ModalSize.Small,
            Position = ModalPosition.Middle
        };

        var modal = ModalService.Show<SkillEditForm>("Edit Skill", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var editedSkill = (Skill)result.Data;
            var index = Character.Skills.FindIndex(s => s.Id == editedSkill.Id);
            if (index != -1)
            {
                Character.Skills[index] = editedSkill;
            }
        }
    }

    private void OpenDiceRollModal(string title, string description, int modifier)
    {
        var parameters = new ModalParameters()
            .Add(nameof(DiceRollerModal.Title), title)
            .Add(nameof(DiceRollerModal.Description), description)
            .Add(nameof(DiceRollerModal.Modifier), modifier);

        ModalService.Show<DiceRollerModal>("Dice Roll", parameters);
    }
    
    private async Task RollDice(int Quantity, int Modifier, RollType CurrentRollType, string Title)
    {
        DiceRollerService.RollDice(20, Quantity, Modifier, CurrentRollType, Title);
    }

    private void RemoveSkill(Skill skill)
    {
        if (!CanEdit) return;
        Character.Skills.Remove(skill);
    }

}