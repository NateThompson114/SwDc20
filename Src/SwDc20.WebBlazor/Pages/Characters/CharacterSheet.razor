@* @page "/character/{Id:guid}" *@
@* @using SwDc20.Core.Domain.Entities.Weapon.V0._8 *@
@* @inject CharacterService CharacterService *@
@* @inject NavigationManager NavigationManager *@
@* @inject WeaponService WeaponService *@
@* *@
@* <h3>Character Sheet</h3> *@
@* *@
@* @if (characterWrapper == null) *@
@* { *@
@*     <p>Loading...</p> *@
@* } *@
@* else *@
@* { *@
@*     <div class="character-sheet"> *@
@*         <h4>@characterWrapper.Document.Name</h4> *@
@*         <p>Level @characterWrapper.Document.Level @characterWrapper.Document.Ancestry @characterWrapper.Document.Class (@characterWrapper.Document.Subclass)</p> *@
@* *@
@*         <h5>Attributes</h5> *@
@*         <div class="row"> *@
@*             <div class="col-md-3">Might: @characterWrapper.Document.Might</div> *@
@*             <div class="col-md-3">Agility: @characterWrapper.Document.Agility</div> *@
@*             <div class="col-md-3">Charisma: @characterWrapper.Document.Charisma</div> *@
@*             <div class="col-md-3">Intelligence: @characterWrapper.Document.Intelligence</div> *@
@*         </div> *@
@* *@
@*         <h5>Skills</h5> *@
@*         <ul> *@
@*             @foreach (var skill in characterWrapper.Document.Skills) *@
@*             { *@
@*             <li>@skill.Name (@skill.AttributeUsed): @skill.CalculateValue(characterWrapper.Document) (Rank: @skill.Rank)</li> *@
@*             } *@
@*         </ul> *@
@* *@
@*         <h5>Trades</h5> *@
@*         <ul> *@
@*             @foreach (var trade in characterWrapper.Document.Trades) *@
@*             { *@
@*                 <li>@trade.Name: +@trade.Bonus</li> *@
@*             } *@
@*         </ul> *@
@* *@
@*         <h5>Languages</h5> *@
@*         <ul> *@
@*             @foreach (var language in characterWrapper.Document.Languages) *@
@*             { *@
@*                 <li>@language.Name (@language.Proficiency)</li> *@
@*             } *@
@*         </ul> *@
@* *@
@*         <h5>Class Features</h5> *@
@*         <ul> *@
@*             @foreach (var feature in characterWrapper.Document.Features) *@
@*             { *@
@*                 <li>@feature</li> *@
@*             } *@
@*         </ul> *@
@* *@
@*         <h5>Equipment</h5> *@
@*         <ul> *@
@*             @foreach (var item in characterWrapper.Document.Inventory) *@
@*             { *@
@*                 <li>@item</li> *@
@*             } *@
@*         </ul> *@
@* *@
@*         $1$ <h5>Weapons</h5> #1# *@
@*         $1$ <table class="table"> #1# *@
@*         $1$     <thead> #1# *@
@*         $1$     <tr> #1# *@
@*         $1$         <th>Name</th> #1# *@
@*         $1$         <th>Type</th> #1# *@
@*         $1$         <th>Points Remaining</th> #1# *@
@*         $1$         <th>Properties Remaining</th> #1# *@
@*         $1$         <th>Damage</th> #1# *@
@*         $1$         <th>Properties</th> #1# *@
@*         $1$         <th>1h/2h Hit Bonus</th> #1# *@
@*         $1$         <th>Actions</th> #1# *@
@*         $1$     </tr> #1# *@
@*         $1$     </thead> #1# *@
@*         $1$     <tbody> #1# *@
@*         $1$     @foreach (var weapon in _weapons) #1# *@
@*         $1$     { #1# *@
@*         $1$     <tr> #1# *@
@*         $1$         <td>@weapon.Document.Name</td> #1# *@
@*         $1$         <td>@weapon.Document.PrimaryType.Name</td> #1# *@
@*         $1$         <td>@(weapon.Document.Points - weapon.Document.Properties.Sum(p => p.Cost))</td> #1# *@
@*         $1$         <td>@(weapon.Document.PropertyLimit - weapon.Document.Properties.Count(pr => pr.CountsTowardsMaximumProperties))</td> #1# *@
@*         $1$         <td>@weapon.Document.Properties.Sum(p => p.DamageIncrease)</td> #1# *@
@*         $1$         <td>@(string.Join(", ", weapon.Document.Properties.Select(p => p.Name)))</td> #1# *@
@*         $1$         <td> #1# *@
@*         $1$             <span>1h:@GetOneHandedHitBonus(weapon.Document)</span> #1# *@
@*         $1$             <span>/</span> #1# *@
@*         $1$             <span>2h:@GetTwoHandedHitBonus(weapon.Document)</span> #1# *@
@*         $1$         </td> #1# *@
@*         $1$         <td> #1# *@
@*         $1$             <button class="btn btn-primary btn-sm" @onclick="() => EditWeapon(weapon)">Edit</button> #1# *@
@*         $1$             <button class="btn btn-danger btn-sm" @onclick="() => DeleteWeapon(weapon)">Delete</button> #1# *@
@*         $1$         </td> #1# *@
@*         $1$     </tr> #1# *@
@*         $1$     } #1# *@
@*         $1$     </tbody> #1# *@
@*         $1$ </table> #1# *@
@*         $1$ <ul class="list-group"> #1# *@
@*         $1$     @foreach (var weapon in characterWrapper.Document.Weapons) #1# *@
@*         $1$     { #1# *@
@*         $1$         <li class="list-group-item"> #1# *@
@*         $1$             <h6>@weapon.Name</h6> #1# *@
@*         $1$             <p>Damage: @weapon.Damage (@weapon.DamageType)</p> #1# *@
@*         $1$             <p>Description: @weapon.Description</p> #1# *@
@*         $1$             <p>Calculation: @weapon.Calculation</p> #1# *@
@*         $1$         </li> #1# *@
@*         $1$     } #1# *@
@*         $1$ </ul> #1# *@
@* *@
@*         <p>Currency: @characterWrapper.Document.Currency</p> *@
@*     </div> *@
@* *@
@* *@
@*     <button class="btn btn-primary" @onclick="() => EditCharacter(Id)">Edit Character</button> *@
@* } *@
@* *@
@* @code { *@
@*     [Parameter] *@
@*     public Guid Id { get; set; } *@
@*     private List<DocumentWrapper<Weapon>> _weapons = new List<DocumentWrapper<Weapon>>(); *@
@* *@
@*     private DocumentWrapper<Character> characterWrapper; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         characterWrapper = await CharacterService.GetCharacterAsync(Id); *@
@*         if (characterWrapper == null) *@
@*         { *@
@*             NavigationManager.NavigateTo("/characters"); *@
@*         } *@
@*     } *@
@* *@
@*     private void EditCharacter(Guid id) *@
@*     { *@
@*         NavigationManager.NavigateTo($"/character/edit/{id}"); *@
@*     } *@
@* } *@