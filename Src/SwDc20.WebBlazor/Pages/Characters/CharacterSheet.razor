@page "/character/{Id:guid}"
@using SwDc20.Core.Domain.Entities.Weapon.V0._8
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject WeaponService WeaponService

<h3>Character Sheet</h3>

@if (characterWrapper == null)
{
    <p>Loading...</p>
}
else
{
    <div class="character-sheet">
        <h4>@characterWrapper.Document.Name</h4>
        <p>Level @characterWrapper.Document.Level @characterWrapper.Document.Ancestry @characterWrapper.Document.Class (@characterWrapper.Document.Subclass)</p>

        <h5>Attributes</h5>
        <div class="row">
            <div class="col-md-3">Might: @characterWrapper.Document.Might</div>
            <div class="col-md-3">Agility: @characterWrapper.Document.Agility</div>
            <div class="col-md-3">Charisma: @characterWrapper.Document.Charisma</div>
            <div class="col-md-3">Intelligence: @characterWrapper.Document.Intelligence</div>
        </div>

        <h5>Skills</h5>
        <ul>
            @foreach (var skill in characterWrapper.Document.Skills)
            {
            <li>@skill.Name (@skill.AttributeUsed): @skill.CalculateValue(characterWrapper.Document) (Rank: @skill.Rank)</li>
            }
        </ul>

        <h5>Trades</h5>
        <ul>
            @foreach (var trade in characterWrapper.Document.Trades)
            {
                <li>@trade.Name: +@trade.Bonus</li>
            }
        </ul>

        <h5>Languages</h5>
        <ul>
            @foreach (var language in characterWrapper.Document.Languages)
            {
                <li>@language.Name (@language.Proficiency)</li>
            }
        </ul>

        <h5>Class Features</h5>
        <ul>
            @foreach (var feature in characterWrapper.Document.Features)
            {
                <li>@feature</li>
            }
        </ul>

        <h5>Equipment</h5>
        <ul>
            @foreach (var item in characterWrapper.Document.Inventory)
            {
                <li>@item</li>
            }
        </ul>

        @* <h5>Weapons</h5> *@
        @* <table class="table"> *@
        @*     <thead> *@
        @*     <tr> *@
        @*         <th>Name</th> *@
        @*         <th>Type</th> *@
        @*         <th>Points Remaining</th> *@
        @*         <th>Properties Remaining</th> *@
        @*         <th>Damage</th> *@
        @*         <th>Properties</th> *@
        @*         <th>1h/2h Hit Bonus</th> *@
        @*         <th>Actions</th> *@
        @*     </tr> *@
        @*     </thead> *@
        @*     <tbody> *@
        @*     @foreach (var weapon in _weapons) *@
        @*     { *@
        @*     <tr> *@
        @*         <td>@weapon.Document.Name</td> *@
        @*         <td>@weapon.Document.PrimaryType.Name</td> *@
        @*         <td>@(weapon.Document.Points - weapon.Document.Properties.Sum(p => p.Cost))</td> *@
        @*         <td>@(weapon.Document.PropertyLimit - weapon.Document.Properties.Count(pr => pr.CountsTowardsMaximumProperties))</td> *@
        @*         <td>@weapon.Document.Properties.Sum(p => p.DamageIncrease)</td> *@
        @*         <td>@(string.Join(", ", weapon.Document.Properties.Select(p => p.Name)))</td> *@
        @*         <td> *@
        @*             <span>1h:@GetOneHandedHitBonus(weapon.Document)</span> *@
        @*             <span>/</span> *@
        @*             <span>2h:@GetTwoHandedHitBonus(weapon.Document)</span> *@
        @*         </td> *@
        @*         <td> *@
        @*             <button class="btn btn-primary btn-sm" @onclick="() => EditWeapon(weapon)">Edit</button> *@
        @*             <button class="btn btn-danger btn-sm" @onclick="() => DeleteWeapon(weapon)">Delete</button> *@
        @*         </td> *@
        @*     </tr> *@
        @*     } *@
        @*     </tbody> *@
        @* </table> *@
        @* <ul class="list-group"> *@
        @*     @foreach (var weapon in characterWrapper.Document.Weapons) *@
        @*     { *@
        @*         <li class="list-group-item"> *@
        @*             <h6>@weapon.Name</h6> *@
        @*             <p>Damage: @weapon.Damage (@weapon.DamageType)</p> *@
        @*             <p>Description: @weapon.Description</p> *@
        @*             <p>Calculation: @weapon.Calculation</p> *@
        @*         </li> *@
        @*     } *@
        @* </ul> *@

        <p>Currency: @characterWrapper.Document.Currency</p>
    </div>


    <button class="btn btn-primary" @onclick="() => EditCharacter(Id)">Edit Character</button>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    private List<DocumentWrapper<Weapon>> _weapons = new List<DocumentWrapper<Weapon>>();

    private DocumentWrapper<Character> characterWrapper;

    protected override async Task OnInitializedAsync()
    {
        characterWrapper = await CharacterService.GetCharacterAsync(Id);
        if (characterWrapper == null)
        {
            NavigationManager.NavigateTo("/characters");
        }
    }

    private void EditCharacter(Guid id)
    {
        NavigationManager.NavigateTo($"/character/edit/{id}");
    }
}