@using System.Linq;
@using SwDc20.WebBlazor.Pages.Characters.Contaners
@inject SkillService SkillService


<h4>Step 2: Background (Skill, Trades, & Languages)</h4>

<div class="form-floating">
    <InputTextArea id="background" @bind-Value="Character.Background" class="form-control" />
    <label for="background">Background</label>
</div>

<hr/>

<h5>Skills</h5>

<SkillsContainer Character="@Character" CanEdit="true" IsMobile="@IsMobile" VersionTwo="false" />

<hr/>

<h5>Trades</h5>
<div class="input-group">
    <label class="input-group-text" for="tradeName">Trade Name</label>
    <InputText id="tradeName" @bind-Value="newTradeName" class="form-control" />
    <label class="input-group-text" for="tradeBonus">Bonus</label>
    <InputNumber id="tradeBonus" @bind-Value="newTradeBonus" class="form-control" />
    <button type="button" class="btn btn-secondary" @onclick="AddTrade">Add Trade</button>
</div>

<ul class="list-group mt-2">
    @foreach (var trade in Character.Trades)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            @trade.Name: +@trade.Bonus
            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveTrade(trade)">X</button>
        </li>
    }
</ul>

<hr/>

<h5>Languages</h5>
<div class="input-group">
    <label class="input-group-text" for="languageName">Language Name</label>
    <InputText id="languageName" @bind-Value="newLanguageName" class="form-control" />
    <label class="input-group-text" for="languageProficiency">Proficiency</label>
    <InputSelect id="languageProficiency" @bind-Value="newLanguageProficiency" class="form-control">
        <option value="Fluent">Fluent</option>
        <option value="Limited">Limited</option>
    </InputSelect>
    <button type="button" class="btn btn-secondary" @onclick="AddLanguage">Add Language</button>
</div>

<ul class="list-group mt-2">
    @foreach (var language in Character.Languages)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            @language.Name (@language.Proficiency)
            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveLanguage(language)">X</button>
        </li>
    }
</ul>

<hr/>

<div class="card border-success">
    <h4 class="card-header bg-success">
        Background (Skills, Trades, & Languages)
    </h4>
    
    <div class="card-body">
        <p>This represents how your were raised and brought up, what type of culture you were around, and what you have done since birth. You gain “Traits” from your Background at 1st level that grant you some flavorful or mechanical benefits. You can not go over the Mastery Limit of Novice unless you have a Feature that allows you to do so.</p>

        <p>Each Background gives 5 Skill Points, 3 Trade Points, and 2 Language Points.</p>

        <p class="alert-warning">Beta Note: The only piece “missing” from Background is a “Background Trait”. This will be something 100% FLAVOR based and only enhance Roleplay.</p>    
    </div>
    
    <div class="card-body">
        <h5 class="card-header">
            Skills
        </h5>

        <p >Your Background gives you 5 Skill Points, but you also increase or decrease your Skill Points based on your Intelligence Attribute.</p>

        <p class="alert-info">Starting Skill Points = 5 + Intelligence (yes, you do subtract if your Intelligence is negative).</p>

        <strong >Knowledge Skills</strong>: Remember, if you put 1 Skill Point into a Knowledge Skill, you get a free “bonus point” to put into any other Knowledge Skill. You still have to follow the Mastery Cap of Novice though.

        <span class="alert-info">DC Tip: Bards get 2 more Skill Points at level 1 in their Class Table.</span>
        
    </div>
    

    <div class="card-body">
        <h5 class="card-header">
            Trades
        </h5>

        <p>Your Background gives you 3 Trade Points. You can convert 1 Skill Point into 1 Trade point, but not the other way around.</p>
    </div>

    <div class="card-body">
        <h5 class="card-header">
            Languages
        </h5>

        <p>Your Background gives you Fluency in the Common Language and 2 Language Points that you can spend on any Language of your choice. Additionally, you can convert 1 Trade Point into 2 Language Points.</p>
    </div>

    <div class="card-body">
        <h5 class="card-header">
            Background Starting Equipment
        </h5>

        <p>Coming Soon. You get a list of starting equipment based on your Background. You could instead choose to receive a flat amount of gold or even roll for your gold.</p>
    </div>
</div>

@code {
    [Parameter] public Character Character { get; set; }
    [Parameter] public bool IsMobile { get; set; }

    private List<Skill> availableSkills = new List<Skill>();
    private bool allowSkillChanges = false;
    private string newSkillName = "";
    private string newSkillAttribute = "Intelligence";
    private string newTagAttribute = "Knowledge";
    
    private int newSkillBonus;
    private string newTradeName;
    private int newTradeBonus;
    private string newLanguageName;
    private string newLanguageProficiency = "Limited";
    

    protected override async Task OnInitializedAsync()
    {
        var localSkills = await SkillService.GetSkillsAsync();
        availableSkills = localSkills.Any() 
            ? localSkills.Select(s => s.Document).ToList() 
            : SkillService.GetDefaultSkills();

        if (!Character.Skills.Any())
        {
            Character.Skills = new List<Skill>(availableSkills.Select(s => new Skill(s.Name, s.AttributeUsed, s.Tag)
            {
                Id = Guid.NewGuid(),
                Version = Skill.CurrentVersion
            }));
        }
    }
    
    private void AddNewSkill()
    {
        if (!string.IsNullOrWhiteSpace(newSkillName) && !Character.Skills.Any(s => s.Name == newSkillName))
        {
            var newSkill = new Skill(newSkillName, newSkillAttribute, newTagAttribute)
            {
                Id = Guid.NewGuid(),
                Version = Skill.CurrentVersion
            };
            Character.Skills.Add(newSkill);
            availableSkills.Add(newSkill);
            SkillService.SaveSkillAsync(newSkill);

            newSkillName = "";
            newSkillAttribute = "Intelligence";
            newTagAttribute = "Knowledge";
            StateHasChanged();
        }
    }

    private void RemoveSkill(Skill skill)
    {
        Character.Skills.Remove(skill);
    }

    private async Task AlignSkills()
    {
        var localSkills = await SkillService.GetSkillsAsync();
        availableSkills = localSkills.Any() 
            ? localSkills.Select(s => s.Document).ToList() 
            : SkillService.GetDefaultSkills();

        foreach (var availableSkill in availableSkills)
        {
            if (!Character.Skills.Any(s => s.Name == availableSkill.Name))
            {
                Character.Skills.Add(new Skill(availableSkill.Name, availableSkill.AttributeUsed, availableSkill.Tag)
                {
                    Id = Guid.NewGuid(),
                    Version = Skill.CurrentVersion
                });
            }
        }

        Character.Skills = Character.Skills.Where(s => availableSkills.Any(a => a.Name == s.Name)).ToList();

        StateHasChanged();
    }

    private void AddTrade()
    {
        if (!string.IsNullOrWhiteSpace(newTradeName))
        {
            Character.Trades.Add(new Trade { Name = newTradeName, Bonus = newTradeBonus });
            newTradeName = string.Empty;
            newTradeBonus = 0;
        }
    }

    private void RemoveTrade(Trade trade)
    {
        Character.Trades.Remove(trade);
    }

    private void AddLanguage()
    {
        if (!string.IsNullOrWhiteSpace(newLanguageName))
        {
            Character.Languages.Add(new Language { Name = newLanguageName, Proficiency = newLanguageProficiency });
            newLanguageName = string.Empty;
        }
    }

    private void RemoveLanguage(Language language)
    {
        Character.Languages.Remove(language);
    }
}