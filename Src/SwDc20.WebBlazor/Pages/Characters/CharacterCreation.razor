@page "/character/create"
@page "/character/edit/{Id:guid}"
@using SwDc20.WebBlazor.Pages.Characters.Steps
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager

<h3>@(Id == null ? "Create" : "Edit") Character</h3>

@if (characterWrapper == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@characterWrapper.Document" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @switch (currentStep)
        {
            case 1:
                <CharacterCreationStep1 Character="@characterWrapper.Document" />
                break;
            case 2:
                <CharacterCreationStep2 Character="@characterWrapper.Document" />
                break;
            case 3:
                <CharacterCreationStep3 Character="@characterWrapper.Document" />
                break;
            case 4:
                <CharacterCreationStep4 Character="@characterWrapper.Document" />
                break;
            case 5:
                <CharacterCreationStep5 Character="@characterWrapper.Document" />
                break;
        }

        <div class="mt-3">
            @if (currentStep > 1)
            {
                <button type="button" class="btn btn-secondary" @onclick="PreviousStep">Previous</button>
            }
            @if (currentStep < totalSteps)
            {
                <button type="button" class="btn btn-primary" @onclick="NextStep">Next</button>
            }
            else
            {
                <button type="submit" class="btn btn-success">Save Character</button>
            }
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private DocumentWrapper<Character> characterWrapper;
    private int currentStep = 1;
    private int totalSteps = 5;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            characterWrapper = await CharacterService.GetCharacterAsync(Id.Value);
            if (characterWrapper == null)
            {
                NavigationManager.NavigateTo("/characters");
            }
        }
        else
        {
            characterWrapper = new DocumentWrapper<Character>
            {
                ContentId = Guid.NewGuid(),
                DocumentType = "Character",
                ContentVersion = Character.CurrentVersion,
                Document = new Character()
            };
        }
    }

    private void NextStep()
    {
        if (currentStep < totalSteps)
        {
            currentStep++;
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
        }
    }

    private async Task HandleValidSubmit()
    {
        await CharacterService.SaveCharacterAsync(characterWrapper);
        NavigationManager.NavigateTo("/characters");
    }
}