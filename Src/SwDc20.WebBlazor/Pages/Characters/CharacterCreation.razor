@page "/characters/create"
@page "/character/create"
@page "/characters/edit/{Id:guid}"
@page "/character/edit/{Id:guid}"
@using SwDc20.Core.Interfaces
@using SwDc20.WebBlazor.Pages.Characters.Steps
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject IScreenSizeService ScreenSizeService

<h3>@(Id == null ? "Create" : "Edit") Character</h3>
<Toolbar IsMobile="@IsMobile"/>

@if (_characterWrapper == null)
{
    <p>Loading...</p>
}
else
{
    <h6>Character Id: @_characterWrapper.ContentId</h6>

    @if (_character == null)
    {
        <p>Error: Character data is missing.</p>
    }
    else
    {
        <EditForm Model="@_character" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-floating">
                        <InputText id="name" @bind-Value="_character.Name" class="form-control"/>
                        <label for="name">Character Name</label>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-floating">
                        <InputText id="player" @bind-Value="_character.PlayerName" class="form-control"/>
                        <label for="player">Player:</label>
                    </div>
                </div>
            </div>
            
            <br/>
            
            <div class="row">
                <div class="form-floating">
                    <div class="input-group">
                        <span class="input-group-text">Level:</span>
                        <InputNumber id="level" @bind-Value="_character.Level" class="form-control" min="0" max="20"/>
                        <span class="input-group-text">Combat Mastery: @_character.CombatMastery</span>
                    </div>
                </div>
            </div>
            
            <hr/>
            
            <div class="d-flex justify-content-between align-items-center">
                @if (currentStep < totalSteps)
                {
                    <button type="button" class="btn btn-primary" @onclick="NextStep">Next</button>
                }
                else
                {
                    <button type="submit" class="btn btn-success">Save Character</button>
                }
                @if (currentStep > 1)
                {
                    <button type="button" class="btn btn-secondary" @onclick="PreviousStep">Previous</button>
                }
            </div>

            <hr/>
            <div class="container">
                @switch (currentStep)
                {
                    case 1:
                        <CharacterCreationStep1 Character="@_character" IsMobile="@IsMobile" />
                        break;
                    case 2:
                        <CharacterCreationStep2 Character="@_character" IsMobile="@IsMobile" />
                        break;
                    case 3:
                        <CharacterCreationStep3 Character="@_character" IsMobile="@IsMobile"/>
                        break;
                    case 4:
                        <CharacterCreationStep4 Character="@_character" IsMobile="@IsMobile"/>
                        break;
                    default:
                        <p>Invalid step: @currentStep</p>
                        break;
                }
            </div>

            <hr/>

            <div class="d-flex justify-content-between align-items-center">
                @if (currentStep < totalSteps)
                {
                    <button type="button" class="btn btn-primary" @onclick="NextStep">Next</button>
                }
                else
                {
                    <button type="submit" class="btn btn-success">Save Character</button>
                }
                @if (currentStep > 1)
                {
                    <button type="button" class="btn btn-secondary" @onclick="PreviousStep">Previous</button>
                }
            </div>

        </EditForm>
    }
}

<div class="row pt-5 mt-5"></div>
<div class="row pt-5 mt-5"></div>

@code {
    [Parameter] public Guid? Id { get; set; }
    private bool IsMobile { get; set; } = false;

    private DocumentWrapper<Character>? _characterWrapper;
    private Character _character;
    private int currentStep = 1;
    private int totalSteps = 4;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                _characterWrapper = await CharacterService.GetCharacterAsync(Id.Value);
                if (_characterWrapper == null)
                {
                    NavigationManager.NavigateTo("/characters");
                    return;
                }
            }
            else
            {
                var guid = Guid.NewGuid();
                _characterWrapper = new DocumentWrapper<Character>
                {
                    ContentId = guid,
                    DocumentType = "Character",
                    ContentVersion = Character.CurrentVersion,
                    Document = new Character
                    {
                        Id = guid,
                        Version = Character.CurrentVersion
                    }
                };
            }

            _character = _characterWrapper.Document;

            if (_character == null)
            {
                throw new InvalidOperationException("Character is null after initialization.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
// You might want to display this error to the user or handle it in some way
        }
        ScreenSizeService.IsMobileChanged += OnIsMobileChanged;
    }
    
    #region Mobile Phone Check

    private async Task CheckIfMobileAsync()
    {
        IsMobile = await ScreenSizeService.IsMobileAsync();
        StateHasChanged();
    }

    private void OnIsMobileChanged(object sender, bool isMobile)
    {
        IsMobile = isMobile;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Synchronous cleanup
        ScreenSizeService.IsMobileChanged -= OnIsMobileChanged;
    }

    public async ValueTask DisposeAsync()
    {
        // Asynchronous cleanup
        Dispose(); // Call the synchronous cleanup first

        if (ScreenSizeService is IAsyncDisposable disposable)
        {
            await disposable.DisposeAsync();
        }
    }

    #endregion

    private void NextStep()
    {
        if (currentStep < totalSteps)
        {
            currentStep++;
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (_characterWrapper != null)
            {
                _characterWrapper.DateUpdated = DateTime.UtcNow;
                _characterWrapper.Document = _character;
                await CharacterService.SaveCharacterAsync(_characterWrapper);
                NavigationManager.NavigateTo($"/characters/{_character.Id}");
            }
            else
            {
                throw new InvalidOperationException("Character data is missing.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleValidSubmit: {ex.Message}");
            //todo: Add error handling and Toast message
        }
    }

}