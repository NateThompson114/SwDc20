@page "/character/{Id:guid}"
@using System.Collections.ObjectModel
@using System.Web
@using SwDc20.Core.Domain.Entities.Weapon.V0._8
@using SwDc20.Core.Interfaces
@using SwDc20.WebBlazor.Pages.Characters.Contaners
@using SwDc20.WebBlazor.Pages.Characters.Modals.CharacterSheet
@inject CharacterService CharacterService
@inject SkillService SkillService
@inject WeaponService WeaponService
@inject NavigationManager NavigationManager
@inject IScreenSizeService ScreenSizeService
@implements IDisposable
@implements IAsyncDisposable

<div class="container-fluid">
<div class="d-flex justify-content-between align-items-center mb-3 @(VersionTwoForm ? "border-1 border-secondary" : "")">
    @if (VersionTwoForm)
    {
        <div class="row">
            <h1>@(CurrentCharacter?.Name ?? "New Character")</h1>
            @if (!CanEdit)
            {
                <h5>Player: @(CurrentCharacter?.PlayerName ?? "Unknown")</h5>
            }
        </div>
    }
    else
    {
        <h1>@(CurrentCharacter?.Name ?? "New Character")</h1>
    }

    @if (showSaveIndicator)
    {
        <span class="save-indicator text-sm-center"> ✅Saved</span>
    }

    @if (!string.IsNullOrEmpty(CurrentCharacter.ImageUrl))
    {
        <img src="@CurrentCharacter.ImageUrl" alt="Character Image" style="max-width: 100px; max-height: 100px;"/>
    }

</div>

<EditForm Model="@CurrentCharacter" OnValidSubmit="SaveCharacter">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <Toolbar IsMobile="@IsMobile"/>


    @if (CanEdit)
    {
        <div class="row mb-2">
            <div class="col-md-6">
                <div class="form-floating">
                    <InputText id="name" @bind-Value="CurrentCharacter.Name" class="form-control" @bind-Value:after="AutoSaveCharacter" disabled="@(!CanEdit)"/>
                    <label for="name">Character Name</label>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-floating">
                    <InputText id="player" @bind-Value="CurrentCharacter.PlayerName" class="form-control" @bind-Value:after="AutoSaveCharacter" disabled="@(!CanEdit)"/>
                    <label for="player">Player</label>
                </div>
            </div>
        </div>

        <div class="form-group mb-2" hidden="@(!CanEdit)">
            <label for="imageUrl">Image URL</label>
            <InputText id="imageUrl" class="form-control" @bind-Value="CurrentCharacter.ImageUrl" @bind-Value:after="AutoSaveCharacter" disabled="@(!CanEdit)"/>
        </div>
    }


    <div class="row mb-2">
        <div class="form-floating">
            <div class="input-group">
                <span class="input-group-text">Level:</span>
                <InputNumber id="level" @bind-Value="CurrentCharacter.Level" class="form-control" min="0" max="20" @bind-Value:after="AutoSaveCharacter" disabled="@(!CanEdit)"/>
                <span class="input-group-text">Combat Mastery: @CurrentCharacter.CombatMastery</span>
            </div>
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-4">
            <div class="form-floating">
                <InputText id="class" @bind-Value="CurrentCharacter.Class" class="form-control" @bind-Value:after="AutoSaveCharacter" disabled="@(!CanEdit)"/>
                <label for="class">Class</label>
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-floating">
                <InputText id="subclass" @bind-Value="CurrentCharacter.Subclass" class="form-control" @bind-Value:after="AutoSaveCharacter" disabled="@(!CanEdit)"/>
                <label for="subclass">SubClass</label>
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-floating">
                <InputText id="ancestry" class="form-control" @bind-Value="CurrentCharacter.Ancestry" @bind-Value:after="AutoSaveCharacter" disabled="@(!CanEdit)"/>
                <label for="ancestry">Ancestry</label>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-2">
            <div class="card border-danger" aria-roledescription="Attribute and Prime Container" aria-description="Container card for attribute cards and prime modifier, these are the key values for your characters, and contain Might, Agility, Charisma, and Intelligence.">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>Attributes</h4>
                    <CharacterSheet_AttributesModal
                        CurrentCharacter="@CurrentCharacter"
                        OnAttributesChanged="@AutoSaveCharacter"/>
                </div>
                <div class="card-body">
                    <div class="col-lg-auto col-md-6 m-2">
                        <div class="col-lg-auto col-md-6">
                            <SwDc20.WebBlazor.Components.AttributeCardWithSave
                                AttributeName="Prime"
                                AttributeValue="CurrentCharacter.PrimeModifier"
                                IsMobile="@IsMobile"
                                CanEdit="@CanEdit"
                                VersionTwo="true"
                                CompactVersion="true"
                                NoRolls="true"/>
                        </div>
                    </div>

                    <div class="col-lg-auto col-md-6 m-2">
                        <SwDc20.WebBlazor.Components.AttributeCardWithSave
                            AttributeName="@nameof(CurrentCharacter.Might)"
                            @bind-AttributeValue="CurrentCharacter.Might"
                            @bind-SaveMastery="CurrentCharacter.MightSaveMastery"
                            UpdateSaveMasteries="@UpdateSaveMasteries"
                            SelectedMasteriesCount="@SelectedMasteriesCount"
                            SaveValue="@Character.CalculateSaves.CalculateMightSave(CurrentCharacter)"
                            IsMobile="@IsMobile"
                            CanEdit="@CanEdit"
                            VersionTwo="true"
                            CompactVersion="true"/>
                    </div>

                    <div class="col-lg-auto col-md-6 m-2">
                        <SwDc20.WebBlazor.Components.AttributeCardWithSave
                            AttributeName="@nameof(CurrentCharacter.Agility)"
                            @bind-AttributeValue="CurrentCharacter.Agility"
                            @bind-SaveMastery="CurrentCharacter.AgilitySaveMastery"
                            UpdateSaveMasteries="@UpdateSaveMasteries"
                            SelectedMasteriesCount="@SelectedMasteriesCount"
                            SaveValue="@Character.CalculateSaves.CalculateAgilitySave(CurrentCharacter)"
                            IsMobile="@IsMobile"
                            CanEdit="@CanEdit"
                            VersionTwo="true"
                            CompactVersion="true"/>
                    </div>

                    <div class="col-lg-auto col-md-6 m-2">
                        <SwDc20.WebBlazor.Components.AttributeCardWithSave
                            AttributeName="@nameof(CurrentCharacter.Charisma)"
                            @bind-AttributeValue="CurrentCharacter.Charisma"
                            @bind-SaveMastery="CurrentCharacter.CharismaSaveMastery"
                            UpdateSaveMasteries="@UpdateSaveMasteries"
                            SelectedMasteriesCount="@SelectedMasteriesCount"
                            SaveValue="@Character.CalculateSaves.CalculateCharismaSave(CurrentCharacter)"
                            IsMobile="@IsMobile"
                            CanEdit="@CanEdit"
                            VersionTwo="true"
                            CompactVersion="true"/>
                    </div>

                    <div class="col-lg-auto col-md-6 m-2">
                        <SwDc20.WebBlazor.Components.AttributeCardWithSave
                            AttributeName="@nameof(CurrentCharacter.Intelligence)"
                            @bind-AttributeValue="CurrentCharacter.Intelligence"
                            @bind-SaveMastery="CurrentCharacter.IntelligenceSaveMastery"
                            UpdateSaveMasteries="@UpdateSaveMasteries"
                            SelectedMasteriesCount="@SelectedMasteriesCount"
                            SaveValue="@Character.CalculateSaves.CalculateIntelligenceSave(CurrentCharacter)"
                            IsMobile="@IsMobile"
                            CanEdit="@CanEdit"
                            VersionTwo="true"
                            CompactVersion="true"/>
                    </div>

                    <div class="row"></div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <SkillsContainer Character="@CurrentCharacter" CanEdit="@CanEdit" IsMobile="@IsMobile" OnChanged="@AutoSaveCharacter" VersionTwo="true" CompactVersion="true" DemoMode="false"/>
        </div>
        <div class="col-md-7">
            <div class="row">
                <div class="col-md-8">
                    <HealthStaminaManaContainer Character="@CurrentCharacter" CanEdit="@CanEdit" IsMobile="@IsMobile" OnChanged="@AutoSaveCharacter"/>
                </div>
                <div class="col-md-4">
                    <DefenseContainer Character="@CurrentCharacter" CanEdit="@CanEdit" OnChanged="@AutoSaveCharacter" VersionTwo="true"/>
                </div>
            </div>
            <div class="row">
                <div class="container-fluid">
                    <div class="card border-dark mt-2">
                        <div class="card-header">
                            <ul class="nav nav-tabs card-header-tabs">
                                @for (int i = 0; i < MenuItems.Count; i++)
                                {
                                    var index = i;
                                    <li class="nav-item">
                                        <a class="nav-link @(SelectedIndex == index ? "active" : "")"
                                           @onclick="() => SelectedIndex = index"
                                           href="javascript:void(0)">
                                            @MenuItems[index].Title
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="card-body">
                            @switch (SelectedIndex)
                            {
                                case 0:
                                    @* <ActionsContent /> *@
                                    <CombatContainer Character="@CurrentCharacter" CanEdit="@CanEdit" IsMobile="@IsMobile" OnCombatChanged="AutoSaveCharacter" VersionTwo="@VersionTwo" CompactVersion="@CompactVersion" DemoMode="@DemoMode"/>
                                    <ResourceContainer Character="@CurrentCharacter" CanEdit="@CanEdit" OnResourcesChanged="@AutoSaveCharacter"/>
                                    break;
                                case 1:
                                    @* <SpellsContent /> *@
                                    <p>Spells Content</p>
                                    break;
                                case 2:
                                    @* <InventoryContent /> *@
                                    <InventoryContainer Character="@CurrentCharacter" CanEdit="@CanEdit" IsMobile="@IsMobile" OnInventoryChanged="@AutoSaveCharacter"/>
                                    break;
                                case 3:
                                    @* <FeaturesContent /> *@
                                    <FeaturesContainer Character="@CurrentCharacter" CanEdit="@CanEdit" OnFeaturesChanged="@AutoSaveCharacter"/>
                                    break;
                                case 4:
                                    @* <BackgroundContent /> *@
                                    <p>Background Content</p>
                                    break;
                                case 5:
                                    @* <NotesContent /> *@
                                    <p>Notes Content</p>
                                    break;
                                case 6:
                                    @* <ExtrasContent /> *@
                                    <TradesContainer Character="@CurrentCharacter" OnTradesChanged="@AutoSaveCharacter" CanEdit="@CanEdit"/>
                                    <LanguageContainer Character="@CurrentCharacter" CanEdit="@CanEdit" OnLanguagesChanged="@AutoSaveCharacter"/>
                                    break;
                            }
                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>


    @if (CanEdit)
    {
        <hr/>
        <button type="submit" class="btn btn-primary" @onclick="SaveCharacterAndClose">Save Character</button>
        <hr/>
    }

</EditForm>

</div>

<div class="row pt-5 mt-5"></div>
<div class="row pt-5 mt-5"></div>


@code
{
    [Parameter] public Guid Id { get; set; } = Guid.NewGuid();
    [Parameter] public bool CanEdit { get; set; } = false;
    private bool IsMobile { get; set; } = false;
    private bool ShowEditSlider { get; set; } = true;

    [Parameter] public bool CompactVersion { get; set; }
    private bool VersionTwoForm { get; set; } = false;
    private bool VersionTwo { get; set; } = true;
    private bool DemoMode { get; set; } = false;

    private int SelectedIndex { get; set; } = 0;

    private ReadOnlyCollection<MenuItem> MenuItems { get; } = new List<MenuItem>
    {
        new("Actions", typeof(string)),
        new("Spells", typeof(string)),
        new("Inventory", typeof(InventoryContainer)),
        new("Features & Traits", typeof(FeaturesContainer)),
        new("Background", typeof(string)),
        new("Notes", typeof(string)),
        new("Extras", typeof(string))
        // new("Actions", typeof(ActionsContent)),
        // new("Spells", typeof(SpellsContent)),
        // new("Inventory", typeof(InventoryContent)),
        // new("Features & Traits", typeof(FeaturesContent)),
        // new("Background", typeof(BackgroundContent)),
        // new("Notes", typeof(NotesContent)),
        // new("Extras", typeof(ExtrasContent))
    }.AsReadOnly();

    private record MenuItem(string Title, Type ContentType);

    private void VersionTwoAlignment()
    {
        VersionTwo = true;
        DemoMode = !VersionTwoForm;
        AlignDemo();
    }

    private void AlignDemo()
    {
        if (!DemoMode)
        {
            VersionTwo = true;
            CompactVersion = false;
        }
    }

    public Character CurrentCharacter { get; set; } = new()
    {
        Id = Guid.NewGuid(),
        Version = Character.CurrentVersion
    };

    private List<DocumentWrapper<Skill>> availableSkills;
    private List<DocumentWrapper<Weapon>> availableWeapons = [];
    private bool showSaveIndicator = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);

        var editQuery = query["edit"];
        if (!string.IsNullOrWhiteSpace(editQuery))
        {
            CanEdit = editQuery.Equals("true", StringComparison.InvariantCultureIgnoreCase);
        }

        await base.OnInitializedAsync();
        await CheckIfMobileAsync();
        ScreenSizeService.IsMobileChanged += OnIsMobileChanged;
        StateHasChanged();

        var characterWrapper = await CharacterService.GetCharacterAsync(Id);

        CurrentCharacter = characterWrapper?.Document ?? new Character
        {
            Id = Id,
            Version = Character.CurrentVersion,
            Resources = new List<CharacterResource>()
        };

        availableSkills = await SkillService.GetSkillsAsync();

        if (!availableSkills.Any())
        {
            availableSkills = SkillService.GetDefaultSkills()
                .Select(s => new DocumentWrapper<Skill>
                    {
                        ContentId = s.Id,
                        Document = s,
                        DocumentType = "Skill",
                        ContentVersion = s.Version
                    }
                ).ToList();
        }

        if (!CurrentCharacter.Skills.Any())
        {
            CurrentCharacter.Skills = availableSkills.Select(s => s.Document)
                .Select(s => new Skill()
                    {
                        Id = s.Id,
                        Name = s.Name,
                        AttributeUsed = s.AttributeUsed,
                        Tag = s.Tag,
                        UseForMartialCheck = s.UseForMartialCheck,
                        Version = Skill.CurrentVersion
                    }
                ).ToList();
        }


        if (CurrentCharacter.ActionPoints == 0)
        {
            CurrentCharacter.ActionPoints = 4;
        }


        availableWeapons = await WeaponService.GetWeaponsAsync();


        if (!CurrentCharacter.IsInitiallySaved)
        {
            ShowEditSlider = false;
            CanEdit = true;
        }
        else
        {
            ShowEditSlider = true;
        }
    }

    #region Mobile Phone Check

    private async Task CheckIfMobileAsync()
    {
        IsMobile = await ScreenSizeService.IsMobileAsync();
        StateHasChanged();
    }

    private void OnIsMobileChanged(object sender, bool isMobile)
    {
        IsMobile = isMobile;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Synchronous cleanup
        ScreenSizeService.IsMobileChanged -= OnIsMobileChanged;
    }

    public async ValueTask DisposeAsync()
    {
        // Asynchronous cleanup
        Dispose(); // Call the synchronous cleanup first

        if (ScreenSizeService is IAsyncDisposable disposable)
        {
            await disposable.DisposeAsync();
        }
    }

    #endregion


    private void UpdateUrl()
    {
        if (CanEdit)
        {
            var uri = NavigationManager.GetUriWithQueryParameter("edit", CanEdit);
            NavigationManager.NavigateTo(uri, false);
        }
        else
        {
            RemoveQueryParameter("edit");
        }
    }

    private void RemoveQueryParameter(string parameterName)
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (queryParams[parameterName] != null)
        {
            queryParams.Remove(parameterName);

            var uriBuilder = new UriBuilder(uri);
            uriBuilder.Query = queryParams.ToString();

            NavigationManager.NavigateTo(uriBuilder.Uri.ToString(), forceLoad: false);
        }
    }


    private async Task SaveCharacter()
    {
        if (CurrentCharacter != null)
        {
            var characterWrapper = new DocumentWrapper<Character>
            {
                Document = CurrentCharacter,
                ContentId = CurrentCharacter.Id,
                ContentVersion = CurrentCharacter.Version
            };

            await CharacterService.SaveCharacterAsync(characterWrapper);

            if (!CurrentCharacter.IsInitiallySaved)
            {
                // Skip save if the character hasn't been initially saved
                return;
            }

            showSaveIndicator = true;
            StateHasChanged();
            await Task.Delay(2000);
            showSaveIndicator = false;
            StateHasChanged();
        }
    }

    private async Task SaveCharacterAndClose()
    {
        CurrentCharacter.CreatedTimestamp = DateTime.Now;
        CurrentCharacter.IsInitiallySaved = true;

        await SaveCharacter();
        NavigationManager.NavigateTo("/characters");
    }

    private int SelectedMasteriesCount => (CurrentCharacter?.MightSaveMastery == true ? 1 : 0) + (CurrentCharacter?.AgilitySaveMastery == true ? 1 : 0) + (CurrentCharacter?.CharismaSaveMastery == true ? 1 : 0) + (CurrentCharacter?.IntelligenceSaveMastery == true ? 1 : 0);

    private async Task UpdateSaveMasteries()
    {
        await AutoSaveCharacter();
    }

    private async Task AutoSaveCharacter()
    {
        if (!CurrentCharacter.IsInitiallySaved)
        {
            // Skip autosave if the character hasn't been initially saved
            return;
        }

        await SaveCharacter();
    }
}