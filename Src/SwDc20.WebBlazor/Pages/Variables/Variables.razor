@page "/variables"
@using SwDc20.Core.Domain.Entities.Variable.V0._8
@using SwDc20.WebBlazor.Models
@using SwDc20.Core.Application.Constants
@using SwDc20.Core.Application.Constants.Dc20
@using SwDc20.Core.Domain.Enums
@using SwDc20.Core.Domain.Entities.Character.V0._8
@inject VariableService VariableService
@inject SkillService SkillService

<h1>Variables</h1>

@if (!AreAllStandardVariablesLoaded())
{
    <button class="btn btn-primary mb-3 me-2" @onclick="LoadStandardVariables">Load Standard Variables</button>
}
<button class="btn btn-success mb-3" @onclick="() => OpenModal(new Variable { Id = Guid.NewGuid(), Version = Variable.CurrentVersion, Properties = new List<Property>(), Deletable = true })">Add New Variable</button>

@if (variables == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Cost</th>
                <th>Description</th>
                <th>Properties</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var variableWrapper in variables)
            {
                var variable = variableWrapper.Document;
                <tr>
                    <td>@variable.Name</td>
                    <td>@variable.Cost</td>
                    <td>@variable.Description</td>
                    <td>@string.Join(", ", variable.Properties)</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => OpenModal(variable)">Edit</button>
                        @if (variable.Deletable)
                        {
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteVariable(variable.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingVariable.Id == Guid.Empty ? "Add" : "Edit") Variable</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingVariable" OnValidSubmit="SaveVariable" @onsubmit:preventDefault>
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="name">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="editingVariable.Name" />
                        </div>

                        <div class="form-group">
                            <label for="cost">Cost</label>
                            <InputNumber id="cost" class="form-control" @bind-Value="editingVariable.Cost" />
                        </div>

                        <div class="form-group">
                            <label for="damageIncrease">Damage Increase</label>
                            <InputNumber id="damageIncrease" class="form-control" @bind-Value="editingVariable.DamageIncrease" />
                        </div>

                        <div class="form-group">
                            <label for="twoHandedDamageIncrease">Two-Handed Damage Increase</label>
                            <InputNumber id="twoHandedDamageIncrease" class="form-control" @bind-Value="editingVariable.TwoHandedDamageIncrease" />
                        </div>

                        <div class="form-group">
                            <label for="bonusToHit">Bonus To Hit</label>
                            <InputNumber id="bonusToHit" class="form-control" @bind-Value="editingVariable.BonusToHit" />
                        </div>

                        <div class="form-group">
                            <label for="twoHandedBonusToHit">Two-Handed Bonus To Hit</label>
                            <InputNumber id="twoHandedBonusToHit" class="form-control" @bind-Value="editingVariable.TwoHandedBonusToHit" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="editingVariable.Description" />
                        </div>

                        <div class="form-group">
                            <label for="calculation">Calculation</label>
                            <InputText id="calculation" class="form-control" @bind-Value="editingVariable.Calculation" />
                        </div>

                        <div class="form-group">
                            <label>Properties</label>
                            @foreach (var property in Property.List)
                            {
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="@property.Name" 
                                           checked="@(editingVariable.Properties?.Contains(property) ?? false)"
                                           @onchange="@(e => ToggleProperty(property))" />
                                    <label class="form-check-label" for="@property.Name">@property.Name</label>
                                </div>
                            }
                        </div>

                        <div class="form-group">
                            <label>Required Variables</label>
                            @if (variables != null)
                            {
                                foreach (var variableWrapper in variables)
                                {
                                    var variable = variableWrapper.Document;
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="@($"required-{variable.Id}")"
                                               checked="@editingVariable.Requires.Any(r => r.Id == variable.Id)"
                                               @onchange="@(e => ToggleRequiredVariable(variable))"/>
                                        <label class="form-check-label" for="@($"required-{variable.Id}")">@variable.Name</label>
                                    </div>
                                }
                            }
                        </div>

                        <div class="form-group">
                            <label>Default Variable For Properties</label>
                            @foreach (var property in Property.List)
                            {
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="@($"default-{property.Name}")"
                                       checked="@(editingVariable.DefaultVariableForProperties?.Contains(property) ?? false)"
                                       @onchange="@(e => ToggleDefaultProperty(property))" />
                                <label class="form-check-label" for="@($"default-{property.Name}")">@property.Name</label>
                            </div>
                            }
                        </div>

                        <div class="form-group">
                            <label for="deletable">Deletable</label>
                            <InputSelect id="deletable" class="form-control" @bind-Value="editingVariable.Deletable">
                                <option value="true">True</option>
                                <option value="false">False</option>
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="isStackable">IsStackable</label>
                            <InputSelect id="isStackable" class="form-control" @bind-Value="editingVariable.IsStackable">
                                <option value="true">True</option>
                                <option value="false">False</option>
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="countsTowardsMaximumProperties">Counts Towards Property Maximum</label>
                            <InputSelect id="countsTowardsMaximumProperties" class="form-control" @bind-Value="editingVariable.Deletable">
                                <option value="true">True</option>
                                <option value="false">False</option>
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="mightModification">Might Modification</label>
                            <InputNumber id="mightModification" class="form-control" @bind-Value="editingVariable.MightModification" />
                        </div>

                        <div class="form-group">
                            <label for="agilityModification">Agility Modification</label>
                            <InputNumber id="agilityModification" class="form-control" @bind-Value="editingVariable.AgilityModification" />
                        </div>

                        <div class="form-group">
                            <label for="charismaModification">Charisma Modification</label>
                            <InputNumber id="charismaModification" class="form-control" @bind-Value="editingVariable.CharismaModification" />
                        </div>

                        <div class="form-group">
                            <label for="intelligenceModification">Intelligence Modification</label>
                            <InputNumber id="intelligenceModification" class="form-control" @bind-Value="editingVariable.IntelligenceModification" />
                        </div>

                        <div class="form-group">
                            <label for="physicalDefenseModification">Physical Defense Modification</label>
                            <InputNumber id="physicalDefenseModification" class="form-control" @bind-Value="editingVariable.PhysicalDefenseModification" />
                        </div>

                        <div class="form-group">
                            <label for="rangeModification">Range Modification</label>
                            <InputNumber id="rangeModification" class="form-control" @bind-Value="editingVariable.RangeModification" />
                        </div>

                        <div class="form-group">
                            <label for="reachModification">Reach Modification</label>
                            <InputNumber id="reachModification" class="form-control" @bind-Value="editingVariable.ReachModification" />
                        </div>

                        <div class="form-group">
                            <label for="weaponStyleCountModification">Weapon Style Count Modification</label>
                            <InputNumber id="weaponStyleCountModification" class="form-control" @bind-Value="editingVariable.WeaponStyleCountModification" />
                        </div>

                        <div class="form-group">
                            <label for="heavyHitDamageIncrease">Heavy Hit Damage Increase</label>
                            <InputNumber id="heavyHitDamageIncrease" class="form-control" @bind-Value="editingVariable.HeavyHitDamageIncrease" />
                        </div>

                        <div class="form-group">
                            <label for="brutalHitDamageIncrease">Brutal Hit Damage Increase</label>
                            <InputNumber id="brutalHitDamageIncrease" class="form-control" @bind-Value="editingVariable.BrutalHitDamageIncrease" />
                        </div>

                        <div class="form-group">
                            <SkillModificationEditor @bind-SkillModifications="editingVariable.SkillsModified" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<DocumentWrapper<Variable>> variables;
    private bool showModal = false;
    private Variable editingVariable = new Variable
    {
        Id = Guid.NewGuid(),
        Version = Variable.CurrentVersion
    };
    private List<Skill> availableSkills = new List<Skill>();

    protected override async Task OnInitializedAsync()
    {
        await LoadVariables();
        await LoadAvailableSkills();
    }

    private async Task LoadAvailableSkills()
    {
        var localSkills = await SkillService.GetSkillsAsync();
        availableSkills = localSkills.Any() 
            ? localSkills.Select(s => s.Document).ToList() 
            : SkillService.GetDefaultSkills();
    }

    private async Task LoadVariables()
    {
        variables = await VariableService.GetVariablesAsync();
    }

    private bool AreAllStandardVariablesLoaded()
    {
        if (variables == null || !variables.Any())
        {
            return false;
        }

        var standardVariableIds = Dc20StandardVariables.ToList().Select(v => v.Id).ToHashSet();
        var loadedVariableIds = variables
            .Select(v => v.Document?.Id)
            .Where(id => id.HasValue)
            .Select(id => id.Value)
            .ToHashSet();
        return standardVariableIds.IsSubsetOf(loadedVariableIds);
    }

    private async Task LoadStandardVariables()
    {
        var standardVariables = Dc20StandardVariables.ToList();
        foreach (var variable in standardVariables)
        {
            await VariableService.SaveVariableAsync(variable);
        }
        await LoadVariables();
    }

    private async Task DeleteVariable(Guid id)
    {
        await VariableService.DeleteVariableAsync(id);
        await LoadVariables();
    }

    private void OpenModal(Variable variable)
    {
        editingVariable = new Variable
        {
            Id = variable.Id,
            Name = variable.Name,
            Cost = variable.Cost,
            DamageIncrease = variable.DamageIncrease,
            TwoHandedDamageIncrease = variable.TwoHandedDamageIncrease,
            BonusToHit = variable.BonusToHit,
            TwoHandedBonusToHit = variable.TwoHandedBonusToHit,
            Description = variable.Description,
            Properties = new List<Property>(variable.Properties ?? Enumerable.Empty<Property>()),
            Calculation = variable.Calculation,
            Deletable = variable.Deletable,
            IsStackable = variable.IsStackable,
            CountsTowardsMaximumProperties = variable.CountsTowardsMaximumProperties,
            MightModification = variable.MightModification,
            AgilityModification = variable.AgilityModification,
            CharismaModification = variable.CharismaModification,
            IntelligenceModification = variable.IntelligenceModification,
            PhysicalDefenseModification = variable.PhysicalDefenseModification,
            RangeModification = variable.RangeModification,
            ReachModification = variable.ReachModification,
            WeaponStyleCountModification = variable.WeaponStyleCountModification,
            HeavyHitDamageIncrease = variable.HeavyHitDamageIncrease,
            BrutalHitDamageIncrease = variable.BrutalHitDamageIncrease,
            SkillsModified = new List<VariableModification<Skill>>(
                variable.SkillsModified?.Select(sm => 
                {
                    var skill = availableSkills.FirstOrDefault(s => s.Id == sm.ItemBeingModifiedId) ?? 
                                new Skill(sm.ItemBeingModified.Name, sm.ItemBeingModified.AttributeUsed, sm.ItemBeingModified.Tag)
                                {
                                    Id = sm.ItemBeingModifiedId,
                                    Version = Skill.CurrentVersion
                                };
                    return new VariableModification<Skill>(skill, sm.Value);
                }) ?? Enumerable.Empty<VariableModification<Skill>>()
            ),
            Requires = variable.Requires,
            DefaultVariableForProperties = variable.DefaultVariableForProperties,
            Version = Variable.CurrentVersion
        };
        
        Console.WriteLine($"OpenModal: editingVariable.Requires is {(editingVariable.Requires == null ? "null" : "not null")}");
        
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveVariable()
    {
        await VariableService.SaveVariableAsync(editingVariable);
        await LoadVariables();
        CloseModal();
    }

    private void ToggleProperty(Property property)
    {
        if (editingVariable.Properties == null)
        {
            editingVariable.Properties = new List<Property>();
        }

        if (editingVariable.Properties.Contains(property))
        {
            editingVariable.Properties.Remove(property);
        }
        else
        {
            editingVariable.Properties.Add(property);
        }
    }
    
    private void ToggleRequiredVariable(Variable variable)
    {
        var existingVariable = editingVariable.Requires.FirstOrDefault(r => r.Id == variable.Id);
        
        if (existingVariable != null)
        {
            editingVariable.Requires.Remove(existingVariable);
        }
        else
        {
            editingVariable.Requires.Add(variable);
        }
    }

    private void ToggleDefaultProperty(Property property)
    {
        if (editingVariable.DefaultVariableForProperties.Contains(property))
        {
            editingVariable.DefaultVariableForProperties.Remove(property);
        }
        else
        {
            editingVariable.DefaultVariableForProperties.Add(property);
        }
    }
}