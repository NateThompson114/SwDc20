@using SwDc20.Core.Domain.Entities.Variable.V0._8
@using SwDc20.Core.Domain.Enums
@inject VariableService VariableService

<div class="modal-body">
    @if (properties == null || !properties.Any())
    {
        <p>Loading properties...</p>
    }
    else
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="selectAll" checked="@selectAll" @onchange="ToggleSelectAll">
            <label class="form-check-label" for="selectAll">Select All</label>
        </div>
        @foreach (var property in properties)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="@property.Name"
                       checked="@selectedProperties.Contains(property)"
                       @onchange="@(e => ToggleProperty(property))">
                <label class="form-check-label" for="@property.Name">
                    @property.Name (@GetVariableCount(property))
                </label>
            </div>
        }
    }
</div>
<div class="modal-footer">
    <button type="button" class="btn btn-primary" @onclick="Close">Apply</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    
    [Parameter] public HashSet<VariableProperty> SelectedProperties { get; set; }
    [Parameter] public bool SelectAll { get; set; }
    
    private List<DocumentWrapper<Variable>> variables;
    private HashSet<VariableProperty> selectedProperties;
    private bool selectAll;
    private List<VariableProperty> properties;
    
    protected override void OnParametersSet()
    {
        if (SelectedProperties != null && SelectedProperties.Any())
        {
            selectedProperties = new HashSet<VariableProperty>(SelectedProperties);
            selectAll = selectedProperties.Count == properties.Count;
        }
        else
        {
            selectedProperties = new HashSet<VariableProperty>(properties);
            selectAll = true;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        variables = await VariableService.GetVariablesAsync();
        properties = VariableProperty.List?.ToList() ?? new List<VariableProperty>();

        selectedProperties = SelectedProperties ?? new HashSet<VariableProperty>(properties);
        selectAll = SelectAll;

        if (!selectedProperties.Any() && properties.Any())
        {
            selectedProperties = new HashSet<VariableProperty>(properties);
            selectAll = true;
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        selectAll = (bool)(e.Value ?? true);
        selectedProperties = selectAll ? new HashSet<VariableProperty>(VariableProperty.List) : new HashSet<VariableProperty>();
    }

    private void ToggleProperty(VariableProperty property)
    {
        if (!selectedProperties.Add(property))
        {
            selectedProperties.Remove(property);
        }

        selectAll = selectedProperties.Count == VariableProperty.List.Count;
    }

    private int GetVariableCount(VariableProperty property)
    {
        return variables?.Count(v => v.Document.Properties != null && v.Document.Properties.Contains(property)) ?? 0;
    }

    private async Task Close()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok(new { SelectedProperties = selectedProperties, SelectAll = selectAll }));
    }
}