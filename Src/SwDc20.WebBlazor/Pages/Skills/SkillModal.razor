@inject SkillService SkillService

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Skill" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText id="name" @bind-Value="Skill.Name" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="attributeUsed">Attribute Used</label>
                        <InputSelect id="attributeUsed" @bind-Value="Skill.AttributeUsed" class="form-control">
                            @foreach (var skillAttribute in SkillService.GetAttributeOptions())
                            {
                                <option value="@skillAttribute">@skillAttribute</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label for="tag">Tag</label>
                        <InputText id="tag" @bind-Value="Skill.Tag" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Skill Skill { get; set; } = new Skill
    {
        Id = Guid.NewGuid(),
        Version = Skill.CurrentVersion
    };
    [Parameter] public EventCallback<Skill> OnSave { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public string Title => Skill.Id == Guid.Empty ? "Add Skill" : "Edit Skill";

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        OnClose.InvokeAsync();
    }

    private async Task HandleValidSubmit()
    {
        await OnSave.InvokeAsync(Skill);
        Close();
    }
}