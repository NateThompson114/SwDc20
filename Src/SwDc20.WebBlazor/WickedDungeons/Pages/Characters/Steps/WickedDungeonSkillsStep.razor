@using SwDc20.WebBlazor.WickedDungeons.Models

<EditForm Model="Character" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="attributes-grid">
        @foreach (var characterSkill in Character.Skills)
        {
            <div class="attribute-item">
                <label>@characterSkill.Name</label>
                <div class="attribute-controls">
                    <button type="button" class="btn btn-outline-secondary"
                            @onclick="() => DecrementSkill(characterSkill)">-</button>
                    <span class="attribute-value">@characterSkill.Value</span>
                    <button type="button" class="btn btn-outline-secondary"
                            @onclick="() => IncrementSkill(characterSkill)">+</button>
                </div>
                <small class="attribute-info">@($"{characterSkill.Attribute}({Character.GetAttributeValue(characterSkill.Attribute)})")</small>
            </div>
            
        }
    </div>
    
    <div class="d-flex justify-content-between mt-4">
        <button type="button" class="btn btn-secondary" @onclick="OnBack">Back</button>
        <button type="submit" class="btn btn-primary">Next</button>
    </div>
</EditForm>

@code {
    [Parameter] public WickedDungeonCharacter Character { get; set; } = default!;
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnBack { get; set; }

    private void IncrementSkill(WickedDungeonCharacterSkill skill)
    {
        if (skill.Value >= 20)
        {
            return;
        }
        
        skill.Value++;
        Character.CalculateStats();
        StateHasChanged();
    }

    private void DecrementSkill(WickedDungeonCharacterSkill skill)
    {
        if (skill.Value <= 0)
        {
            return;
        }
        
        skill.Value--;
        Character.CalculateStats();
        StateHasChanged();
    }
}

<style>
    .attributes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
    }

    .attribute-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .attribute-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        margin: 10px 0;
    }

    .attribute-value {
        font-size: 1.2rem;
        font-weight: bold;
        min-width: 40px;
        text-align: center;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        margin-top: 15px;
    }

    .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 8px;
        background-color: #f8f9fa;
        border-radius: 6px;
    }

    .stat-value {
        font-weight: bold;
        color: var(--bs-primary);
    }
</style>