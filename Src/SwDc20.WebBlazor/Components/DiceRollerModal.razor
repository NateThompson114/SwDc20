@using SwDc20.Core.Domain.Enums
@inject DiceRollerService DiceRollerService

<div class="dice-roll-modal">
    <h3>@Title</h3>
    <p>@Description</p>
    <div class="modifier">
        <span>Modifier: @(Modifier >= 0 ? "+" : "")@Modifier</span>
    </div>
    <div class="dice-roller">
        <div class="input-group">
            <label class="input-group-text" for="diceSize">d</label>
            <input id="diceSize" type="number" @bind="DiceSize" min="2" max="100" class="form-control" placeholder="Size"/>
            <label class="input-group-text" for="quantity">X</label>
            <input id="quantity" type="number" @bind="Quantity" min="1" max="500" class="form-control" placeholder="Qty"/>
            <select id="rollType" @bind="CurrentRollType" class="form-select form-select-sm">
                <option value="@RollType.Normal">Normal</option>
                <option value="@RollType.High">High</option>
                <option value="@RollType.Low">Low</option>
            </select>
        </div>
    </div>
    
    <br/>
    
    <div class="actions">
        <button @onclick="RollDice" class="btn btn-primary">Roll</button>
        <button @onclick="Close" class="btn btn-secondary">Close</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Description { get; set; } = "";
    [Parameter] public int Modifier { get; set; } = 0;

    private int _diceSize = 20;
    private int DiceSize
    {
        get => _diceSize;
        set => _diceSize = Math.Clamp(value, 2, 100);
    }

    private int _quantity = 1;
    private int Quantity
    {
        get => _quantity;
        set => _quantity = Math.Clamp(value, 1, 500);
    }

    private RollType CurrentRollType { get; set; } = RollType.Normal;

    private async Task RollDice()
    {
        DiceRollerService.RollDice(DiceSize, Quantity, Modifier, CurrentRollType, Title, Description);
        await Close();
    }

    private async Task Close() => await BlazoredModal.CloseAsync();
}